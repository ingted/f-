<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Always_place_opens_at_top_level" xml:space="preserve">
    <value>항상 최상위에 open 문 배치</value>
  </data>
  <data name="CodeLens" xml:space="preserve">
    <value>CodeLens</value>
  </data>
  <data name="CodeLens_Replace_LineLens" xml:space="preserve">
    <value>선 위가 아니라 오른쪽에 주석 표시</value>
  </data>
  <data name="CodeLens_Switch" xml:space="preserve">
    <value>CodeLens 사용(실험적)</value>
  </data>
  <data name="CodeLens_Prefix" xml:space="preserve">
    <value>주석 접두사</value>
  </data>
  <data name="CodeLens_UseColors" xml:space="preserve">
    <value>주석에서 색 사용</value>
  </data>
  <data name="Code_Fixes" xml:space="preserve">
    <value>코드 수정 사항</value>
  </data>
  <data name="Completion_Lists" xml:space="preserve">
    <value>완성 목록</value>
  </data>
  <data name="Language_Service_Performance" xml:space="preserve">
    <value>성능</value>
  </data>
  <data name="Dash_underline" xml:space="preserve">
    <value>대시 밑줄(_A)</value>
  </data>
  <data name="Dot_underline" xml:space="preserve">
    <value>점 밑줄(_O)</value>
  </data>
  <data name="Navigation_links" xml:space="preserve">
    <value>탐색 링크</value>
  </data>
  <data name="Show_all_symbols" xml:space="preserve">
    <value>열려 있지 않은 네임스페이스에 기호 표시(_Y)</value>
  </data>
  <data name="Show_completion_list_after_a_character_is_deleted" xml:space="preserve">
    <value>문자를 삭제하면 완성 목록 표시(_D)</value>
  </data>
  <data name="Show_completion_list_after_a_character_is_typed" xml:space="preserve">
    <value>문자를 입력하면 완성 목록 표시(_S)</value>
  </data>
  <data name="Enable_in_memory_cross_project_references" xml:space="preserve">
    <value>메모리 내 크로스 프로젝트 참조 사용(_E)</value>
  </data>
  <data name="Project_check_cache_size" xml:space="preserve">
    <value>메모리에 데이터가 캐시된 프로젝트 수</value>
  </data>
  <data name="Show_navigation_links_as" xml:space="preserve">
    <value>탐색 링크를 다음으로 표시(_H)</value>
  </data>
  <data name="Simplify_name_code_fix" xml:space="preserve">
    <value>이름 단순화(불필요한 한정자 제거)</value>
  </data>
  <data name="Solid_underline" xml:space="preserve">
    <value>실선 밑줄(_S)</value>
  </data>
  <data name="Unused_opens_code_fix" xml:space="preserve">
    <value>사용되지 않는 open 문 제거</value>
  </data>
  <data name="Unused_declaration_code_fix" xml:space="preserve">
    <value>사용되지 않는 값에 대해 수정 사항 분석 및 제안</value>
  </data>
  <data name="Block_Structure" xml:space="preserve">
    <value>블록 구조 가이드</value>
  </data>
  <data name="Show_guides" xml:space="preserve">
    <value>F# 코드에 대한 구조체 지침 표시</value>
  </data>
  <data name="Outlining" xml:space="preserve">
    <value>개요</value>
  </data>
  <data name="Show_Outlining" xml:space="preserve">
    <value>F# 코드에 대한 개요 및 축소 가능한 노드 표시</value>
  </data>
  <data name="Time_until_stale_completion" xml:space="preserve">
    <value>부실 결과가 사용될 때까지 시간(밀리초)</value>
  </data>
  <data name="IntelliSense_Performance" xml:space="preserve">
    <value>IntelliSense 성능 옵션</value>
  </data>
  <data name="Project_Performance" xml:space="preserve">
    <value>F# 프로젝트 및 캐싱 성능 옵션</value>
  </data>
  <data name="Enable_Stale_IntelliSense_Results" xml:space="preserve">
    <value>IntelliSense 기능에 대해 부실 데이터 사용</value>
  </data>
  <data name="Tooltip_in_memory_cross_project_references" xml:space="preserve">
    <value>메모리 내 크로스 프로젝트 참조가 메모리에 프로젝트 수준 데이터를 저장하여 IDE 기능이 프로젝트에서 작동하도록 합니다.</value>
  </data>
  <data name="Tooltip_project_check_cache_size" xml:space="preserve">
    <value>프로젝트 데이터가 IDE 기능에 대해 캐시됩니다. 값이 클수록 프로제트가 더 많이 캐시되므로 메모리를 더 많이 사용합니다. 이 값을 조정해도 중소 규모 솔루션에 영향을 미치지 않습니다.</value>
  </data>
  <data name="Enter_key_always" xml:space="preserve">
    <value>입력 시 새 줄 항상 추가</value>
  </data>
  <data name="Enter_key_never" xml:space="preserve">
    <value>입력 시 새 줄 추가 안 함</value>
  </data>
  <data name="Enter_key_only" xml:space="preserve">
    <value>단어를 모두 입력하고 &lt;Enter&gt; 키를 누르면 새 줄 추가</value>
  </data>
  <data name="Enter_Key_Rule" xml:space="preserve">
    <value>키 동작 입력</value>
  </data>
  <data name="Format_on_paste" xml:space="preserve">
    <value>붙여넣을 때 들여쓰기 서식 다시 지정</value>
  </data>
  <data name="Suggest_names_for_errors_code_fix" xml:space="preserve">
    <value>확인되지 않은 식별자의 이름 제안</value>
  </data>
  <data name="Text_hover" xml:space="preserve">
    <value>텍스트 호버</value>
  </data>
  <data name="Diagnostics" xml:space="preserve">
    <value>진단</value>
  </data>
</root>