<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Always_place_opens_at_top_level" xml:space="preserve">
    <value>一律將 open 陳述式放在最上層</value>
  </data>
  <data name="CodeLens" xml:space="preserve">
    <value>CodeLens</value>
  </data>
  <data name="CodeLens_Replace_LineLens" xml:space="preserve">
    <value>在行的右方而非上方顯示註釋</value>
  </data>
  <data name="CodeLens_Switch" xml:space="preserve">
    <value>啟用 CodeLens (實驗性)</value>
  </data>
  <data name="CodeLens_Prefix" xml:space="preserve">
    <value>註釋前置詞</value>
  </data>
  <data name="CodeLens_UseColors" xml:space="preserve">
    <value>在註釋中使用色彩</value>
  </data>
  <data name="Code_Fixes" xml:space="preserve">
    <value>程式碼修正</value>
  </data>
  <data name="Completion_Lists" xml:space="preserve">
    <value>完成清單</value>
  </data>
  <data name="Language_Service_Performance" xml:space="preserve">
    <value>效能</value>
  </data>
  <data name="Dash_underline" xml:space="preserve">
    <value>虛點底線(_A)</value>
  </data>
  <data name="Dot_underline" xml:space="preserve">
    <value>點線底線(_O)</value>
  </data>
  <data name="Navigation_links" xml:space="preserve">
    <value>導覽連結</value>
  </data>
  <data name="Show_all_symbols" xml:space="preserve">
    <value>顯示未開啟之命名空間中的符號(_Y)</value>
  </data>
  <data name="Show_completion_list_after_a_character_is_deleted" xml:space="preserve">
    <value>刪除一個字元後顯示完成清單(_D)</value>
  </data>
  <data name="Show_completion_list_after_a_character_is_typed" xml:space="preserve">
    <value>輸入一個字元後顯示完成清單(_S)</value>
  </data>
  <data name="Enable_in_memory_cross_project_references" xml:space="preserve">
    <value>允許記憶體內跨專案參考(_E)</value>
  </data>
  <data name="Project_check_cache_size" xml:space="preserve">
    <value>資料會快取到記憶體的專案數</value>
  </data>
  <data name="Show_navigation_links_as" xml:space="preserve">
    <value>顯示導覽連結為(_H)</value>
  </data>
  <data name="Simplify_name_code_fix" xml:space="preserve">
    <value>簡化名稱 (移除不必要的限定詞)</value>
  </data>
  <data name="Solid_underline" xml:space="preserve">
    <value>實線底線(_S)</value>
  </data>
  <data name="Unused_opens_code_fix" xml:space="preserve">
    <value>移除未使用的 open 陳述式</value>
  </data>
  <data name="Unused_declaration_code_fix" xml:space="preserve">
    <value>分析未使用的值並建議修正</value>
  </data>
  <data name="Block_Structure" xml:space="preserve">
    <value>區塊結構輔助線</value>
  </data>
  <data name="Show_guides" xml:space="preserve">
    <value>顯示 F# 程式碼的結構方針</value>
  </data>
  <data name="Outlining" xml:space="preserve">
    <value>大綱</value>
  </data>
  <data name="Show_Outlining" xml:space="preserve">
    <value>顯示 F# 程式碼的大綱與可折疊的節點</value>
  </data>
  <data name="Time_until_stale_completion" xml:space="preserve">
    <value>使用過時結果前等待的時間 (毫秒)</value>
  </data>
  <data name="IntelliSense_Performance" xml:space="preserve">
    <value>IntelliSense 效能選項</value>
  </data>
  <data name="Project_Performance" xml:space="preserve">
    <value>F# 專案與快取效能選項</value>
  </data>
  <data name="Enable_Stale_IntelliSense_Results" xml:space="preserve">
    <value>為 IntelliSense 功能啟用過時資料</value>
  </data>
  <data name="Tooltip_in_memory_cross_project_references" xml:space="preserve">
    <value>記憶體內跨專案參考，會在記憶體中儲存專案等級的資料，以允許 IDE 功能在各專案中皆可運作。</value>
  </data>
  <data name="Tooltip_project_check_cache_size" xml:space="preserve">
    <value>專案資料會進行快取，供 IDE 功能使用。值較高時會使用較多的記憶體，這是因為會快取較多的專案數。調整此值應該不會影響中小型的解決方案。</value>
  </data>
  <data name="Enter_key_always" xml:space="preserve">
    <value>一律在按 ENTER 時新增新行</value>
  </data>
  <data name="Enter_key_never" xml:space="preserve">
    <value>一律不在按 ENTER 時新增新行</value>
  </data>
  <data name="Enter_key_only" xml:space="preserve">
    <value>只在完整鍵入字的結尾處按 ENTER 來新增新行</value>
  </data>
  <data name="Enter_Key_Rule" xml:space="preserve">
    <value>ENTER 鍵行為</value>
  </data>
  <data name="Format_on_paste" xml:space="preserve">
    <value>在貼上時重設縮排格式</value>
  </data>
  <data name="Suggest_names_for_errors_code_fix" xml:space="preserve">
    <value>為未解析的識別碼建議名稱</value>
  </data>
  <data name="Text_hover" xml:space="preserve">
    <value>文字暫留</value>
  </data>
  <data name="Diagnostics" xml:space="preserve">
    <value>診斷</value>
  </data>
</root>