<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNewKeyword" xml:space="preserve">
    <value>添加“新”关键字</value>
  </data>
  <data name="ImplementInterface" xml:space="preserve">
    <value>实现接口</value>
  </data>
  <data name="ImplementInterfaceWithoutTypeAnnotation" xml:space="preserve">
    <value>无类型批注的实现接口</value>
  </data>
  <data name="PrefixValueNameWithUnderscore" xml:space="preserve">
    <value>带下划线的前缀“{0}”</value>
  </data>
  <data name="RenameValueToUnderscore" xml:space="preserve">
    <value>将“{0}”重命名为“_”</value>
  </data>
  <data name="SimplifyName" xml:space="preserve">
    <value>简化名称</value>
  </data>
  <data name="NameCanBeSimplified" xml:space="preserve">
    <value>可以简化名称。</value>
  </data>
  <data name="FSharpFunctionsOrMethodsClassificationType" xml:space="preserve">
    <value>F# 函数/方法</value>
  </data>
  <data name="FSharpMutableVarsClassificationType" xml:space="preserve">
    <value>F# 可变变量/引用单元格</value>
  </data>
  <data name="FSharpPrintfFormatClassificationType" xml:space="preserve">
    <value>F# Printf 格式</value>
  </data>
  <data name="FSharpPropertiesClassificationType" xml:space="preserve">
    <value>F# 属性</value>
  </data>
  <data name="FSharpDisposablesClassificationType" xml:space="preserve">
    <value>F# 可释放类型</value>
  </data>
  <data name="RemoveUnusedOpens" xml:space="preserve">
    <value>删除未使用的 open 声明</value>
  </data>
  <data name="UnusedOpens" xml:space="preserve">
    <value>可删除 open 声明。</value>
  </data>
  <data name="6008" xml:space="preserve">
    <value>IntelliSense</value>
  </data>
  <data name="6009" xml:space="preserve">
    <value>QuickInfo</value>
  </data>
  <data name="AddAssemblyReference" xml:space="preserve">
    <value>添加对“{0}”的程序集引用</value>
  </data>
  <data name="AddProjectReference" xml:space="preserve">
    <value>添加对“{0}”的项目引用</value>
  </data>
  <data name="6010" xml:space="preserve">
    <value>代码修补程序</value>
  </data>
  <data name="6011" xml:space="preserve">
    <value>性能</value>
  </data>
  <data name="6012" xml:space="preserve">
    <value>高级</value>
  </data>
  <data name="6013" xml:space="preserve">
    <value>CodeLens</value>
  </data>
  <data name="6014" xml:space="preserve">
    <value>正在格式化</value>
  </data>
  <data name="TheValueIsUnused" xml:space="preserve">
    <value>未使用该值</value>
  </data>
  <data name="CannotDetermineSymbol" xml:space="preserve">
    <value>无法确定插入点下的符号</value>
  </data>
  <data name="CannotNavigateUnknown" xml:space="preserve">
    <value>无法转到到所需位置</value>
  </data>
  <data name="LocatingSymbol" xml:space="preserve">
    <value>正在确定插入点下的符号…</value>
  </data>
  <data name="NavigatingTo" xml:space="preserve">
    <value>正在转到符号...</value>
  </data>
  <data name="NavigateToFailed" xml:space="preserve">
    <value>未能转到符号: {0}</value>
  </data>
  <data name="ExceptionsHeader" xml:space="preserve">
    <value>异常:</value>
  </data>
  <data name="GenericParametersHeader" xml:space="preserve">
    <value>泛型参数:</value>
  </data>
  <data name="RenameValueToDoubleUnderscore" xml:space="preserve">
    <value>将“{0}”重命名为“__”</value>
  </data>
</root>