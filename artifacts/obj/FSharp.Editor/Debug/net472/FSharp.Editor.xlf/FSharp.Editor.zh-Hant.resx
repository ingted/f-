<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNewKeyword" xml:space="preserve">
    <value>新增 'new' 關鍵字</value>
  </data>
  <data name="ImplementInterface" xml:space="preserve">
    <value>實作介面</value>
  </data>
  <data name="ImplementInterfaceWithoutTypeAnnotation" xml:space="preserve">
    <value>實作沒有類型註釋的介面</value>
  </data>
  <data name="PrefixValueNameWithUnderscore" xml:space="preserve">
    <value>有底線的前置詞 '{0}'</value>
  </data>
  <data name="RenameValueToUnderscore" xml:space="preserve">
    <value>將 '{0}' 重新命名為 '_'</value>
  </data>
  <data name="SimplifyName" xml:space="preserve">
    <value>簡化名稱</value>
  </data>
  <data name="NameCanBeSimplified" xml:space="preserve">
    <value>可以簡化名稱。</value>
  </data>
  <data name="FSharpFunctionsOrMethodsClassificationType" xml:space="preserve">
    <value>F# 函式 / 方法</value>
  </data>
  <data name="FSharpMutableVarsClassificationType" xml:space="preserve">
    <value>F# 可變動變數 / 參考儲存格</value>
  </data>
  <data name="FSharpPrintfFormatClassificationType" xml:space="preserve">
    <value>F# Printf 格式</value>
  </data>
  <data name="FSharpPropertiesClassificationType" xml:space="preserve">
    <value>F# 屬性</value>
  </data>
  <data name="FSharpDisposablesClassificationType" xml:space="preserve">
    <value>F# 可處置的類型</value>
  </data>
  <data name="RemoveUnusedOpens" xml:space="preserve">
    <value>移除未使用的公開宣告</value>
  </data>
  <data name="UnusedOpens" xml:space="preserve">
    <value>可以移除公開宣告。</value>
  </data>
  <data name="6008" xml:space="preserve">
    <value>IntelliSense</value>
  </data>
  <data name="6009" xml:space="preserve">
    <value>QuickInfo</value>
  </data>
  <data name="AddAssemblyReference" xml:space="preserve">
    <value>新增組件參考至 '{0}'</value>
  </data>
  <data name="AddProjectReference" xml:space="preserve">
    <value>新增專案參考至 '{0}'</value>
  </data>
  <data name="6010" xml:space="preserve">
    <value>程式碼修正</value>
  </data>
  <data name="6011" xml:space="preserve">
    <value>效能</value>
  </data>
  <data name="6012" xml:space="preserve">
    <value>進階</value>
  </data>
  <data name="6013" xml:space="preserve">
    <value>CodeLens</value>
  </data>
  <data name="6014" xml:space="preserve">
    <value>格式化</value>
  </data>
  <data name="TheValueIsUnused" xml:space="preserve">
    <value>未使用該值</value>
  </data>
  <data name="CannotDetermineSymbol" xml:space="preserve">
    <value>無法決定插入點下的符號</value>
  </data>
  <data name="CannotNavigateUnknown" xml:space="preserve">
    <value>無法瀏覽至要求的位置</value>
  </data>
  <data name="LocatingSymbol" xml:space="preserve">
    <value>正在尋找插入點下的符號...</value>
  </data>
  <data name="NavigatingTo" xml:space="preserve">
    <value>正在瀏覽至符號...</value>
  </data>
  <data name="NavigateToFailed" xml:space="preserve">
    <value>瀏覽至符號失敗: {0}</value>
  </data>
  <data name="ExceptionsHeader" xml:space="preserve">
    <value>例外狀況:</value>
  </data>
  <data name="GenericParametersHeader" xml:space="preserve">
    <value>泛型參數:</value>
  </data>
  <data name="RenameValueToDoubleUnderscore" xml:space="preserve">
    <value>將 '{0}' 重新命名為 '__'</value>
  </data>
</root>