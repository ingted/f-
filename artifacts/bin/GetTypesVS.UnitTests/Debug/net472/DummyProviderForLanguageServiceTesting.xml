<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>DummyProviderForLanguageServiceTesting</name></assembly>
<members>
<member name="M:FSData.SR.xmlDocSimplifiedDataContext(System.String)">
<summary>
 A simplified data context for the %s. The full data context object is available via the DataContext property.
 (Originally from FSData.txt:58)
</summary>
</member>
<member name="M:FSData.SR.xmlDocGetSimplifiedContext(System.String)">
<summary>
 Get a simplified data context for this %s. By default, no credentials are set
 (Originally from FSData.txt:62)
</summary>
</member>
<member name="M:FSData.SR.xmlDocGetFullContext(System.String)">
<summary>
 Gets the full data context object for this %s
 (Originally from FSData.txt:61)
</summary>
</member>
<member name="M:FSData.SR.xmlDocGetEntities(System.String,System.String)">
<summary>
 Gets the &apos;%s&apos; entities from the %s. This property may be used as the source in a query expression.
 (Originally from FSData.txt:60)
</summary>
</member>
<member name="M:FSData.SR.xmlDocFullServiceTypesAPINoCredentials(System.String,System.String)">
 <summary><para>The full API to the %s.</para><para>To use the service via the full API, create an instance of one of the types %s.</para></summary>
 (Originally from FSData.txt:57)
</member>
<member name="M:FSData.SR.xmlDocFullServiceTypesAPI(System.String,System.String)">
 <summary><para>The full API to the %s.</para><para>To use the service via the full API, create an instance of one of the types %s.</para><para>You may need to set the Credentials property on the instance.</para></summary>
 (Originally from FSData.txt:56)
</member>
<member name="M:FSData.SR.xmlDocExecuteProcedure(System.String)">
<summary>
 Execute the &apos;%s&apos; procedure
 (Originally from FSData.txt:59)
</summary>
</member>
<member name="M:FSData.SR.xmlDocDisposeSimplifiedContext">
<summary>
 Disposes the given context
 (Originally from FSData.txt:77)
</summary>
</member>
<member name="M:FSData.SR.xmlDocContainsTheSimplifiedContextTypes(System.String)">
<summary>
 Contains the simplified context types for the %s
 (Originally from FSData.txt:55)
</summary>
</member>
<member name="M:FSData.SR.xmlDocConstructSimplifiedContext(System.String)">
<summary>
 Construct a simplified data context for this %s. By default, no credentials are set
 (Originally from FSData.txt:63)
</summary>
</member>
<member name="M:FSData.SR.wsdlServiceTypeHelp">
 <summary>Provides the types to access a WSDL web service</summary><param name='ServiceUri'>The Uri for the WSDL service</param><param name='LocalSchemaFile'>The .wsdlschema file to store locally cached service schema</param><param name='ForceUpdate'>Require that a direct connection to the service be available at design-time and force the refresh of the local schema file (default: true)</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='MessageContract'>Generate Message Contract types (default: false)</param><param name='EnableDataBinding'>Implement the System.ComponentModel.INotifyPropertyChanged interface on all DataContract types to enable data binding (default: false)</param><param name='Serializable'>Generate classes marked with the Serializable Attribute (default: false)</param><param name='Async'>Generate both synchronous and asynchronous method signatures (default: false, which means generate only synchronous method signatures)</param><param name='CollectionType'>A fully-qualified or assembly-qualified name of the type to use as a collection data type when code is generated from schemas</param>
 (Originally from FSData.txt:74)
</member>
<member name="M:FSData.SR.useNullForGlobalNamespace">
<summary>
 Use &apos;null&apos; for global namespace
 (Originally from FSData.txt:28)
</summary>
</member>
<member name="M:FSData.SR.unsupportedFramework">
<summary>
 The .NET SDK 4.0 or 4.5 tools could not be found
 (Originally from FSData.txt:7)
</summary>
</member>
<member name="M:FSData.SR.unreachable">
<summary>
 unreachable
 (Originally from FSData.txt:23)
</summary>
</member>
<member name="M:FSData.SR.unitNotFound(System.String)">
<summary>
 Unit &apos;%s&apos; not found in FSharp.Core SI module
 (Originally from FSData.txt:27)
</summary>
</member>
<member name="M:FSData.SR.unexpectedMethodBase">
<summary>
 unexpected MethodBase
 (Originally from FSData.txt:76)
</summary>
</member>
<member name="M:FSData.SR.typeNotAddedAsAMember(System.String)">
<summary>
 type &apos;%s&apos; was not added as a member to a declaring type
 (Originally from FSData.txt:29)
</summary>
</member>
<member name="M:FSData.SR.staticParameterNotFoundForType(System.String,System.String)">
<summary>
 static parameter &apos;%s&apos; not found for type &apos;%s&apos;
 (Originally from FSData.txt:75)
</summary>
</member>
<member name="M:FSData.SR.sqlEntityConnectionTypeHelp">
 <summary>Provides the types to access a database, using a LINQ-to-Entities mapping</summary><param name='ConnectionString'>The connection string for the database connection</param><param name='ConnectionStringName'>The name of the connection string for the database connection in the configuration file.</param><param name='LocalSchemaFile'>The local file for the database schema</param><param name='Provider'>The name of the ADO.NET data provider to be used for ssdl generation (default: System.Data.SqlClient)</param><param name='EntityContainer'>The name to use for the EntityContainer in the conceptual model</param><param name='ConfigFile'>The name of the configuration file used for connection strings (default: app.config or web.config is used)</param><param name='DataDirectory'>The name of the data directory, used to replace |DataDirectory| in connection strings (default: the project or script directory)</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='ForceUpdate'>Require that a direct connection to the database be available at design-time and force the refresh of the local schema file (default: true)</param><param name='Pluralize'>Automatically pluralize or singularize class and member names using English language rules (default: false)</param><param name='SuppressForeignKeyProperties'>Exclude foreign key properties in entity type definitions (default: false)</param>
 (Originally from FSData.txt:70)
</member>
<member name="M:FSData.SR.sqlEntityConnection">
<summary>
 SQL Entity connection
 (Originally from FSData.txt:69)
</summary>
</member>
<member name="M:FSData.SR.sqlDataConnectionTypeHelp">
 <summary>Provides the types to access a database, using a LINQ-to-SQL mapping</summary><param name='ConnectionString'>The connection string for the database connection. If using Visual Studio, a connection string can be found in database properties in the Server Explorer window.</param><param name='ConnectionStringName'>The name of the connection string for the database connection in the configuration file.</param><param name='LocalSchemaFile'>The local .dbml file for the database schema (default: no local schema file)</param><param name='ForceUpdate'>Require that a direct connection to the database be available at design-time and force the refresh of the local schema file (default: true)</param><param name='Pluralize'>Automatically pluralize or singularize class and member names using English language rules (default: false)</param><param name='Views'>Extract database views (default: true)</param><param name='Functions'>Extract database functions (default: true)</param><param name='ConfigFile'>The name of the configuration file used for connection strings (default: app.config or web.config is used)</param><param name='DataDirectory'>The name of the data directory, used to replace |DataDirectory| in connection strings (default: the project or script directory)</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='StoredProcedures'>Extract stored procedures (default: true)</param><param name='Timeout'>Timeout value in seconds to use when SqlMetal accesses the database (default: 0, which means infinite)</param><param name='ContextTypeName'>The name of data context class (default: derived from database name)</param><param name='Serializable'>Generate uni-directional serializable classes (default: false, which means no serialization)</param>
 (Originally from FSData.txt:67)
</member>
<member name="M:FSData.SR.sqlDataConnectionInfo">
<summary>
 Gets the connection used by the framework
 (Originally from FSData.txt:66)
</summary>
</member>
<member name="M:FSData.SR.sqlDataConnection">
<summary>
 SQL connection
 (Originally from FSData.txt:65)
</summary>
</member>
<member name="P:FSData.SR.SwallowResourceText(System.Boolean)">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:FSData.SR.serviceMetadataFileElementIsEmpty">
<summary>
 ServiceMetadataFile element cannot be empty
 (Originally from FSData.txt:90)
</summary>
</member>
<member name="M:FSData.SR.requiredToolNotFound(System.String)">
<summary>
 The required tool &apos;%s&apos; could not be found.
 (Originally from FSData.txt:92)
</summary>
</member>
<member name="M:FSData.SR.ptdStaticParametersSuppliedButNotExpected(System.String)">
<summary>
 ProvidedTypeDefinition: static parameters supplied but not expected for %s
 (Originally from FSData.txt:32)
</summary>
</member>
<member name="M:FSData.SR.ppSetterAlreadyCreated">
<summary>
 ProvidedProperty: setter MethodInfo has already been created
 (Originally from FSData.txt:22)
</summary>
</member>
<member name="M:FSData.SR.ppGetterAlreadyCreated">
<summary>
 ProvidedProperty: getter MethodInfo has already been created
 (Originally from FSData.txt:21)
</summary>
</member>
<member name="M:FSData.SR.pmNoInvokerName(System.String,System.String)">
<summary>
 ProvidedMethod: no invoker for %s on type %s
 (Originally from FSData.txt:19)
</summary>
</member>
<member name="M:FSData.SR.pdErrorExpectingStaticParameters(System.Int32,System.Int32,System.String)">
<summary>
 ProvidedTypeDefinition: expecting %d static parameters but given %d for type %s
 (Originally from FSData.txt:30)
</summary>
</member>
<member name="M:FSData.SR.pdDefineStaticParametersNotCalled">
<summary>
 ProvidedTypeDefinition: DefineStaticParameters was not called
 (Originally from FSData.txt:31)
</summary>
</member>
<member name="M:FSData.SR.pcNoInvokerName(System.String,System.String)">
<summary>
 ProvidedConstructor: code already given for %s on type %s
 (Originally from FSData.txt:20)
</summary>
</member>
<member name="M:FSData.SR.pcNoInvoker(System.String)">
<summary>
 ProvidedConstructor: no invoker for &apos;%s&apos;
 (Originally from FSData.txt:17)
</summary>
</member>
<member name="M:FSData.SR.pcCodeAlreadyGiven(System.String)">
<summary>
 ProvidedConstructor: code already given for &apos;%s&apos;
 (Originally from FSData.txt:18)
</summary>
</member>
<member name="M:FSData.SR.odataServiceTypeHelp">
 <summary>Provides the types to access an OData service</summary><param name="ServiceUri">The Uri for the OData service</param><param name='LocalSchemaFile'>The local .csdl file for the service schema</param><param name='ForceUpdate'>Require that a direct connection to the service be available at design-time and force the refresh of the local schema file (default: true)</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='DataServiceCollection'>Generate collections derived from DataServiceCollection (default: false)</param>
 (Originally from FSData.txt:73)
</member>
<member name="M:FSData.SR.odataServiceCredentialsInfo">
<summary>
 Gets or sets the authentication information used by each query for this data context object
 (Originally from FSData.txt:72)
</summary>
</member>
<member name="M:FSData.SR.notYetKnownType">
 <not yet known type>
 (Originally from FSData.txt:15)
</member>
<member name="M:FSData.SR.notBothConnectionStringOrConnectionStringName">
<summary>
 When using this provider you must specify either a connection string or a connection string name, but not both. To specify a connection string, use SqlDataConnection&lt;\&quot;...connection string...\&quot;&gt;.
 (Originally from FSData.txt:86)
</summary>
</member>
<member name="M:FSData.SR.notAnArrayPointerOrByref">
<summary>
 not an array, pointer or byref type
 (Originally from FSData.txt:26)
</summary>
</member>
<member name="M:FSData.SR.nonGenericType">
<summary>
 non-generic type
 (Originally from FSData.txt:25)
</summary>
</member>
<member name="M:FSData.SR.nonEquivalentConnectionString">
<summary>
 Connection string presented in EntityClient format can differ only in provider-specific part.
 (Originally from FSData.txt:82)
</summary>
</member>
<member name="M:FSData.SR.nonArrayType">
<summary>
 non-array type
 (Originally from FSData.txt:24)
</summary>
</member>
<member name="M:FSData.SR.noConnectionStringOrConnectionStringName(System.String)">
<summary>
 When using this provider you must specify either a connection string or a connection string name. To specify a connection string, use %s&lt;\&quot;...connection string...\&quot;&gt;.
 (Originally from FSData.txt:85)
</summary>
</member>
<member name="M:FSData.SR.noConfigFileFound2(System.String)">
<summary>
 A configuration string name was specified but the configuration file &apos;%s&apos; was not found
 (Originally from FSData.txt:84)
</summary>
</member>
<member name="M:FSData.SR.noConfigFileFound1">
<summary>
 A configuration string name was specified but no configuration file was found. Neither app.config nor web.config found in project or script directory.
 (Originally from FSData.txt:83)
</summary>
</member>
<member name="M:FSData.SR.moreThanOneNestedType(System.String,System.String)">
<summary>
 There is more than one nested type called &apos;%s&apos; in type &apos;%s&apos;
 (Originally from FSData.txt:39)
</summary>
</member>
<member name="M:FSData.SR.invalidWsdlUri">
<summary>
 The parameter &apos;ServiceUri&apos; cannot be an empty string.
 (Originally from FSData.txt:91)
</summary>
</member>
<member name="M:FSData.SR.invalidProviderInConfigFile(System.String,System.String,System.String)">
<summary>
 Invalid provider &apos;%s&apos; in connection string entry &apos;%s&apos; in config file &apos;%s&apos;. SqlDataConnection can only be used with provider &apos;System.Data.SqlClient&apos;.
 (Originally from FSData.txt:87)
</summary>
</member>
<member name="M:FSData.SR.invalidOperationOnProvidedType(System.String,System.String)">
<summary>
 The operation &apos;%s&apos; on item &apos;%s&apos; should not be called on provided type, member or parameter
 (Originally from FSData.txt:13)
</summary>
</member>
<member name="M:FSData.SR.invalidDataContextClassName(System.String)">
<summary>
 %s is not valid name for data context class
 (Originally from FSData.txt:78)
</summary>
</member>
<member name="M:FSData.SR.invalidConnectionStringInConfigFile(System.String,System.String,System.String)">
<summary>
 Invalid empty connection string &apos;%s&apos; for the connection string name &apos;%s&apos; in config file &apos;%s&apos;
 (Originally from FSData.txt:88)
</summary>
</member>
<member name="M:FSData.SR.invalidConnectionString">
<summary>
 The supplied connection string should be either a valid provider-specific connection string or a valid connection string accepted by the EntityClient.
 (Originally from FSData.txt:81)
</summary>
</member>
<member name="M:FSData.SR.gpiNeedToHandleSpecifiedReturnType">
<summary>
 Need to handle specified return type in GetPropertyImpl
 (Originally from FSData.txt:35)
</summary>
</member>
<member name="M:FSData.SR.gpiNeedToHandleSpecifiedParameterTypes">
<summary>
 Need to handle specified parameter types in GetPropertyImpl
 (Originally from FSData.txt:36)
</summary>
</member>
<member name="M:FSData.SR.gpiNeedToHandleSpecifiedModifiers">
<summary>
 Need to handle specified modifiers in GetPropertyImpl
 (Originally from FSData.txt:37)
</summary>
</member>
<member name="M:FSData.SR.gpiNeedToHandleBinder">
<summary>
 Need to handle binder in GetPropertyImpl
 (Originally from FSData.txt:38)
</summary>
</member>
<member name="P:FSData.SR.SwallowResourceText">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:FSData.SR.getMethodImplDoesNotSupportOverloads">
<summary>
 GetMethodImpl does not support overloads
 (Originally from FSData.txt:34)
</summary>
</member>
<member name="M:FSData.SR.fixedQueriesNotSupported">
<summary>
 The provided ServiceUri is for a data service that supports fixed queries. The OData type provider does not support such services.
 (Originally from FSData.txt:79)
</summary>
</member>
<member name="M:FSData.SR.fileDoesNotContainXMLElement(System.String,System.String)">
<summary>
 The file &apos;%s&apos; doesn&apos;t contain XML element &apos;%s&apos;
 (Originally from FSData.txt:48)
</summary>
</member>
<member name="M:FSData.SR.failedToLoadFileAsXML(System.String)">
<summary>
 Failed to load the file &apos;%s&apos; as XML
 (Originally from FSData.txt:49)
</summary>
</member>
<member name="M:FSData.SR.errorWritingLocalSchemaFile(System.String)">
<summary>
 Error writing to local schema file. %s
 (Originally from FSData.txt:45)
</summary>
</member>
<member name="M:FSData.SR.errorWhileReadingConnectionStringInConfigFile(System.String,System.String,System.String)">
<summary>
 An error occured while reading connection string &apos;%s&apos; from the config file &apos;%s&apos;: &apos;%s&apos;
 (Originally from FSData.txt:89)
</summary>
</member>
<member name="M:FSData.SR.errorReadingSchema(System.String)">
<summary>
 Error reading schema. %s
 (Originally from FSData.txt:46)
</summary>
</member>
<member name="M:FSData.SR.errorInvalidExtensionSchema(System.String,System.String)">
<summary>
 The extension of the given LocalSchema file &apos;%s&apos; is not valid. The required extension is &apos;%s&apos;.
 (Originally from FSData.txt:47)
</summary>
</member>
<member name="M:FSData.SR.edmxFileTypeHelp">
 <summary>Provides the types to access a database with the schema in an EDMX file, using a LINQ-to-Entities mapping</summary><param name='File'>The EDMX file containing the conceptual, storage and mapping schema descriptions</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param>
 (Originally from FSData.txt:68)
</member>
<member name="M:FSData.SR.edmxFileRequiresDotNet45(System.String)">
<summary>
 File &apos;%s&apos; requires .NET 4.5. To use this file please change project target framework to .NET 4.5.
 (Originally from FSData.txt:94)
</summary>
</member>
<member name="M:FSData.SR.dqsServicesNotSupported">
<summary>
 Services that implement the Data Quality Services API are not supported.
 (Originally from FSData.txt:80)
</summary>
</member>
<member name="M:FSData.SR.declaringTypeAlreadySet(System.String)">
<summary>
 ProvidedConstructor: declaringType already set on &apos;%s&apos;
 (Originally from FSData.txt:16)
</summary>
</member>
<member name="M:FSData.SR.dbmlFileTypeHelp">
 <summary>Provides the types to access a database with the schema in a DBML file, using a LINQ-to-SQL mapping</summary><param name='File'>The DBML file containing the schema description</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='ContextTypeName'>The name of data context class (default: derived from database name)</param><param name='Serializable'>Generate uni-directional serializable classes (default: false, which means no serialization)</param>
 (Originally from FSData.txt:64)
</member>
<member name="M:FSData.SR.dataDirectoryNotFound(System.String)">
<summary>
 The data directory &apos;%s&apos; did not exist.
 (Originally from FSData.txt:93)
</summary>
</member>
<member name="M:FSData.SR.containerTypeAlreadySet(System.String,System.String)">
<summary>
 container type for &apos;%s&apos; was already set to &apos;%s&apos;
 (Originally from FSData.txt:33)
</summary>
</member>
<member name="M:FSData.SR.constructorFor(System.String)">
<summary>
 constructor for %s
 (Originally from FSData.txt:14)
</summary>
</member>
<member name="M:FSData.SR.connectionStringNotFound(System.String)">
<summary>
 Connection string &apos;%s&apos; not found in configuration file.
 (Originally from FSData.txt:95)
</summary>
</member>
<member name="M:FSData.SR.connectionInfo">
<summary>
 Gets the connection used by the object context
 (Originally from FSData.txt:71)
</summary>
</member>
<member name="M:FSData.SR.RunStartupValidation">
<summary>
 Call this method once to validate that all known resources are valid; throws if not
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.Namespaces">
<summary>
 Invoked by the type provider to get all provided namespaces with their provided types.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.ResolveAssembly(System.ResolveEventArgs)">
<summary>
 AssemblyResolve handler. Default implementation searches &lt;assemblyname&gt;.dll file in registered folders 
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.RegisterRuntimeAssemblyLocationAsProbingFolder(Microsoft.FSharp.Core.CompilerServices.TypeProviderConfig)">
<summary>
 Registers location of RuntimeAssembly (from TypeProviderConfig) as probing folder
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.RegisterProbingFolder(System.String)">
<summary>
 Registers custom probing path that can be used for probing assemblies
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.Invalidate">
<summary>
 Invoked by the type provider to invalidate the information provided by the provider
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.GetStaticParametersForMethod(System.Reflection.MethodBase)">
<summary>
 Invoked by the host of the type provider to get the static parameters for a method.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.ApplyStaticArgumentsForMethod(System.Reflection.MethodBase,System.String,System.Object[])">
<summary>
 Invoked by the host of the type provider to apply the static argumetns for a method.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.AddNamespace(System.String,Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition})">
<summary>
 Invoked by the type provider to add a namespace of provided types in the specification of the type provider.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.#ctor">
<summary>
 Initializes a type provider 
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.#ctor(System.String,Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition})">
<summary>
 Initializes a type provider to provide the types in the given namespace.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces">
<summary>
 A base type providing default implementations of type provider functionality when all provided 
 types are of type ProvidedTypeDefinition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedAssembly.RegisterGenerated(System.String)">
<summary>
 Register that a given file is a provided generated assembly
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedAssembly.AddTypes(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition})">
<summary>
 Emit the given provided type definitions as part of the assembly 
 and adjust the &apos;Assembly&apos; property of all provided type definitions to return that
 assembly.

 The assembly is only emitted when the Assembly property on the root type is accessed for the first time.
 The host F# compiler does this when processing a generative type declaration for the type.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedAssembly.AddNestedTypes(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition},Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Emit the given nested provided type definitions as part of the assembly.
 and adjust the 'Assembly' property of all provided type definitions to return that
 assembly.
 </summary>
 <param name="enclosingTypeNames">A path of type names to wrap the generated types. The generated types are then generated as nested types.</param>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedAssembly.#ctor(System.String)">
<summary>
 Create a provided generated assembly
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedAssembly">
<summary>
 A provided generated assembly
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SuppressRelocation(System.Boolean)">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition has type-relocation suppressed
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.NonNullable(System.Boolean)">
<summary>
 Disallows the use of the null literal. 
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.IsErased(System.Boolean)">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition is erased
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.HideObjectMethods(System.Boolean)">
<summary>
 Suppress Object entries in intellisense menus in instances of this provided type 
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SuppressRelocation">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition has type-relocation suppressed
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.Logger">
<summary>
 Get or set a utility function to log the creation of root Provided Type. Used to debug caching/invalidation.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.IsErased">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition is erased
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SetEnumUnderlyingType(System.Type)">
<summary>
 Set underlying type for generated enums
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SetBaseTypeDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Type})">
<summary>
 Set the base type to a lazily evaluated value. Use this to delay realization of the base type as late as possible.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SetBaseType(System.Type)">
<summary>
 Set the base type
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SetAttributes(System.Reflection.TypeAttributes)">
<summary>
 Set the attributes on the provided type. This fully replaces the default TypeAttributes.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.ResetEnclosingType(System.Type)">
<summary>
 Reset the enclosing type (for generated nested types)
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.MakeParametricType(System.String,System.Object[])">
<summary>
 FSharp.Data addition: this method is used by Debug.fs
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.EraseType(System.Type)">
<summary>
 Emulate the F# type provider type erasure mechanism to get the 
 actual (erased) type. We erase ProvidedTypes to their base type
 and we erase array of provided type to array of base type. In the
 case of generics all the generic type arguments are also recursively
 replaced with the erased-to types
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.DefineStaticParameters(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedStaticParameter},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition}})">
<summary>
 Define the static parameters available on a statically parameterized type
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.DefineMethodOverride(ProviderImplementation.ProvidedTypes.ProvidedMethod,System.Reflection.MethodInfo)">
<summary>
 Specifies that the given method body implements the given method declaration.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary.
 The documentation is only computed once.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided type definition
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddMembersDelayed``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{``0}})">
<summary>
 Add a set of members to a ProvidedTypeDefinition, delaying computation of the members until required by the compilation context.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddMembers``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Add a set of members to a ProvidedTypeDefinition
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddMemberDelayed``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Add a member to a ProvidedTypeDefinition, delaying computation of the members until required by the compilation context.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddMember(System.Reflection.MemberInfo)">
<summary>
 Add a method, property, nested type or other member to a ProvidedTypeDefinition
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddInterfaceImplementationsDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{System.Type}})">
<summary>
 Add the given function as a set of on-demand computed interfaces.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddInterfaceImplementation(System.Type)">
<summary>
 Add the given type as an implemented interface.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddCustomAttribute(System.Reflection.CustomAttributeData)">
<summary>
 Add a custom attribute to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddAssemblyTypesAsNestedTypesDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Reflection.Assembly})">
<summary>
 Add the types of the generated assembly as generative types, where types in namespaces get hierarchically positioned as nested types.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.#ctor(System.String,Microsoft.FSharp.Core.FSharpOption{System.Type})">
<summary>
 Create a new provided type definition, to be located as a nested type in some type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.#ctor(System.Reflection.Assembly,System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Type})">
<summary>
 Create a new provided type definition in a namespace. 
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition">
<summary>
 Represents a provided type definition.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.One">
<summary>
 Gets the measure indicating the &quot;1&quot; unit of measure, that is the unitless measure. 
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Default">
<summary>
 The ProvidedMeasureBuilder for building measures.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Square(System.Type)">
<summary>
 Returns the measure indicating the square of a unit of measure, e.g. m * m
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.SI(System.String)">
<summary>
 Returns the measure for an SI unit from the F# core library, where the string is in capitals and US spelling, e.g. Meter
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Ratio(System.Type,System.Type)">
<summary>
 Returns the measure indicating the ratio of two units of measure, e.g. kg / m
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Product(System.Type,System.Type)">
<summary>
 Returns the measure indicating the product of two units of measure, e.g. kg * m
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Inverse(System.Type)">
<summary>
 Returns the measure indicating the inverse of two units of measure, e.g. 1 / s
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.AnnotateType(System.Type,Microsoft.FSharp.Collections.FSharpList{System.Type})">
<summary>
 Returns a type where the type has been annotated with the given types and/or units-of-measure.
 e.g. float&lt;kg&gt;, Vector&lt;int, kg&gt;
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder">
<summary>
 Helps create erased provided unit-of-measure annotations.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeBuilder.MakeGenericType(System.Type,Microsoft.FSharp.Collections.FSharpList{System.Type})">
<summary>
 Like typ.MakeGenericType, but will also work with unit-annotated types
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeBuilder.MakeGenericMethod(System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList{System.Type})">
<summary>
 Like methodInfo.MakeGenericMethod, but will also work with unit-annotated types and provided types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedTypeBuilder">
<summary>
 Helpers to build symbolic provided types
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedSymbolType.Kind">
<summary>
 Returns the kind of this symbolic type
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedSymbolType.IsFSharpUnitAnnotated">
<summary>
 For example, int&lt;kg&gt; or int&lt;kilogram&gt;
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedSymbolType.IsFSharpTypeAbbreviation">
<summary>
 For example, kg
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedSymbolType.Args">
<summary>
 Return the provided types used as arguments of this symbolic type
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolType">
<summary>
 Represents an array or other symbolic type involving a provided type as the argument.
 See the type provider spec for the methods that must be implemented.
 Note that the type provider specification does not require us to implement pointer-equality for provided types.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.FSharpTypeAbbreviation">
<summary>
 Indicates that the type constructor is for abbreviated types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.Generic">
<summary>
 Indicates that the type constructor is for named generic types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.ByRef">
<summary>
 Indicates that the type constructor is for byref types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.Pointer">
<summary>
 Indicates that the type constructor is for pointer types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.Array">
<summary>
 Indicates that the type constructor is for a multi-dimensional array
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.SDArray">
<summary>
 Indicates that the type constructor is for a single-dimensional array
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind">
<summary>
 Represents the type constructor in a provided symbol type.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided field
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided field
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided field definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.#ctor(System.String,System.Type)">
<summary>
 Create a new provided field. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedField">
<summary>
 Represents an erased provided field.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided field
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided field
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided field.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.#ctor(System.String,System.Type,System.Object)">
<summary>
 Create a new provided field. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedLiteralField">
<summary>
 Represents an erased provided field.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedEvent.RemoverCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the function used to compute the implementation of sets of this property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedEvent.IsStatic(System.Boolean)">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedEvent.AdderCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of gets of this property.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.#ctor(System.String,System.Type)">
<summary>
 Create a new provided type. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedEvent">
<summary>
 Represents an erased provided property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedProperty.SetterCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the function used to compute the implementation of sets of this property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedProperty.IsStatic(System.Boolean)">
<summary>
 Get or set a flag indicating if the property is static.
 FSharp.Data addition: the getter is used by Debug.fs
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedProperty.GetterCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of gets of this property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedProperty.IsStatic">
<summary>
 Get or set a flag indicating if the property is static.
 FSharp.Data addition: the getter is used by Debug.fs
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided property
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddCustomAttribute(System.Reflection.CustomAttributeData)">
<summary>
 Add a custom attribute to the provided property definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.#ctor(System.String,System.Type,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedParameter}})">
<summary>
 Create a new provided property. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedProperty">
<summary>
 Represents an erased provided property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMethod.IsStaticMethod(System.Boolean)">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMethod.InvokeCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of invocations of this method.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMethod.IsStaticMethod">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.SetMethodAttrs(System.Reflection.MethodAttributes)">
<summary>
 Set the method attributes of the method. By default these are simple &apos;MethodAttributes.Public&apos;
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.GetInvokeCodeInternal(System.Boolean)">
<summary>
 FSharp.Data addition: this method is used by Debug.fs
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.DefineStaticParameters(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedStaticParameter},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],ProviderImplementation.ProvidedTypes.ProvidedMethod}})">
<summary>
 Define the static parameters available on a statically parameterized method
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add XML documentation information to this provided method
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddCustomAttribute(System.Reflection.CustomAttributeData)">
<summary>
 Add a custom attribute to the provided method definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.#ctor(System.String,Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedParameter},System.Type)">
<summary>
 Create a new provided method. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedConstructor.IsImplicitCtor(System.Boolean)">
<summary>
 Set a flag indicating that the constructor acts like an F# implicit constructor, so the
 parameters of the constructor become fields and can be accessed using Expr.GlobalVar with the
 same name.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedConstructor.InvokeCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedConstructor.BaseConstructorCall(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},System.Tuple{System.Reflection.ConstructorInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}}})">
<summary>
 Set the target and arguments of the base constructor call. Only used for generated types.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedConstructor.IsImplicitCtor">
<summary>
 Set a flag indicating that the constructor acts like an F# implicit constructor, so the
 parameters of the constructor become fields and can be accessed using Expr.GlobalVar with the
 same name.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.GetInvokeCodeInternal(System.Boolean)">
<summary>
 FSharp.Data addition: this method is used by Debug.fs
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided constructor.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.#ctor(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedParameter})">
<summary>
 Create a new provided constructor. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedConstructor">
<summary>
 Represents an erased provided constructor.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedStaticParameter.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedStaticParameter.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedStaticParameter">
<summary>
 Represents a provided static parameter.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedParameter">
<summary>
 Represents an erased provided parameter
</summary>
</member>
</members>
</doc>
