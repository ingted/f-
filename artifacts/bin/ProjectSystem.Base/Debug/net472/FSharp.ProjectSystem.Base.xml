<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FSharp.ProjectSystem.Base</name>
    </assembly>
    <members>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.AssemblyName">
            <summary>
            The name of the assembly this reference represents.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.ResolvedAssembly">
            <summary>
            Returns the name of the assembly this reference refers to on this specific
            machine. It can be different from the AssemblyName property because it can
            be more specific.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement,Microsoft.VisualStudio.FSharp.ProjectSystem.BuildResult)">
            <summary>
            Creating AssemblyReferenceNode from fsproj element
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,System.String,Microsoft.VisualStudio.FSharp.ProjectSystem.AddReferenceDialogTab)">
            <summary>
            Creating AssemblyReferenceNode via VS UI ("Add Reference" or otherwise)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.#ctor(System.Int32,Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,System.String)">
            <summary>
            Creating AssemblyReferenceNode via automation (Cider case)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.BindReferenceData">
            <summary>
            Links a reference node to the project and hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.CanShowDefaultIcon">
            <summary>
            Determines if this is node a valid node for painting the default reference icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.AddToProjectFileAndTryResolve(System.String)">
            <summary>
            Initialize 'resolvedInfo' by having MSBuild resolve the assembly in the context of the current project
            </summary>
            <param name="assemblyInclude">Either a full path to a file on disk, or a simple name or fusion name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.InitializeFileChangeEvents">
            <summary>
            Registers with File change events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.UnregisterFromFileChangeService">
            <summary>
            Unregisters this node from file change notifications.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.AssemblyReferenceNode.OnAssemblyReferenceChangedOnDisk(System.Object,Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangedOnDiskEventArgs)">
            <summary>
            Event callback. Called when one of the assembly file is changed.
            </summary>
            <param name="sender">The FileChangeManager object.</param>
            <param name="e">Event args containing the file name that was updated.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.PropertyPageTypeConverterAttribute">
            <summary>
            Defines a type converter.
            </summary>
            <remarks>This is needed to get rid of the type TypeConverter type that could not give back the Type we were passing to him.
            We do not want to use reflection to get the type back from the  ConverterTypeName. Also the GetType methos does not spwan converters from other assemblies.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAFileItem">
            <summary>
            Represents an automation object for a file in a project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAFileItem.IsDirty">
            <summary>
            Returns the dirty state of the document.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is thrown if the project is closed or it the service provider attached to the project is invalid.</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Is thrown if the dirty state cannot be retrived.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAFileItem.Document">
            <summary>
            Gets the Document associated with the item, if one exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAFileItem.Open(System.String)">
            <summary>
            Opens the file item in the specified view.
            </summary>
            <param name="viewKind">Specifies the view kind in which to open the item (file)</param>
            <returns>Window object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAFileItem.Save(System.String)">
            <summary>
            Saves the project item.
            </summary>
            <param name="fileName">The name with which to save the project or project item.</param>
            <exception cref="T:System.InvalidOperationException">Is thrown if the save operation failes.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAFileItem.SaveAs(System.String)">
            <summary>
            Saves the project item.
            </summary>
            <param name="fileName">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>
            <returns>true if the rename was successful. False if Save as failes</returns>
            <exception cref="T:System.ArgumentNullException">Is thrown if fileName is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAFileItem.get_IsOpen(System.String)">
            <summary>
            Gets a value indicating whether the project item is open in a particular view type. 
            </summary>
            <param name="viewKind">A Constants.vsViewKind* indicating the type of view to check.</param>
            <returns>A Boolean value indicating true if the project is open in the given view type; false if not. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAFileItem.DoSave(System.Boolean,System.String)">
            <summary>
            Saves or Save As the  file
            </summary>
            <param name="isCalledFromSaveAs">Flag determining which Save method called , the SaveAs or the Save.</param>
            <param name="fileName">The name of the project file.</param>        
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAFolderItem">
            <summary>
            Represents an automation object for a folder in a project
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems">
            <summary>
            This can navigate a collection object only (partial implementation of ProjectItems interface)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.Items">
            <summary>
            Defines an public list of project items
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.Project">
            <summary>
            Defines a relationship to the associated project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.NodeWithItems">
            <summary>
            Defines the node that contains the items
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject,Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Constructor.
            </summary>
            <param name="project">The associated project.</param>
            <param name="nodeWithItems">The node that defines the items.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject,System.Collections.Generic.IList{EnvDTE.ProjectItem},Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Constructor.
            </summary>
            <param name="project">The associated project.</param>
            <param name="items">A list of items that will make up the items defined by this object.</param>
            <param name="nodeWithItems">The node that defines the items.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.Count">
            <summary>
            Gets a value indicating the number of objects in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.Kind">
            <summary>
            Gets an enumeration indicating the type of object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.ContainingProject">
            <summary>
            Gets the project hosting the project item or items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.AddFromDirectory(System.String)">
            <summary>
            Adds one or more ProjectItem objects from a directory to the ProjectItems collection. 
            </summary>
            <param name="directory">The directory from which to add the project item.</param>
            <returns>A ProjectItem object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.AddFromTemplate(System.String,System.String)">
            <summary>
            Creates a new project item from an existing item template file and adds it to the project. 
            </summary>
            <param name="fileName">The full path and file name of the template project file.</param>
            <param name="name">The file name to use for the new project item.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.AddFolder(System.String,System.String)">
            <summary>
            Creates a new folder in Solution Explorer. 
            </summary>
            <param name="name">The name of the folder node in Solution Explorer.</param>
            <param name="kind">The type of folder to add. The available values are based on vsProjectItemsKindConstants and vsProjectItemKindConstants</param>
            <returns>A ProjectItem object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.AddFromFileCopy(System.String)">
            <summary>
            Copies a source file and adds it to the project. 
            </summary>
            <param name="filePath">The path and file name of the project item to be added.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.AddFromFile(System.String)">
            <summary>
            Adds a project item from a file that is installed in a project directory structure. 
            </summary>
            <param name="fileName">The file name of the item to add as a project item. </param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.Item(System.Object)">
            <summary>
            Get Project Item from index
            </summary>
            <param name="index">Either index by number (1-based) or by name can be used to get the item</param>
            <returns>Project Item. null is return if invalid index is specified</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANavigableProjectItems.GetListOfProjectItems">
            <summary>
            Retrives a list of items associated with the current node.
            </summary>
            <returns>A List of project items</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OANullProperty">
            <summary>
            This object defines a so called null object that is returned as instead of null. This is because callers in VSCore usually crash if a null propery is returned for them.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.FileName">
            <summary>
            For use by F# tooling only.  Gets the file name of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.IsDirty">
            <summary>
            For use by F# tooling only. Specfies if the project is dirty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.Collection">
            <summary>
            Gets the Projects collection containing the Project object supporting this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.Kind">
            <summary>
            Gets a GUID string indicating the kind or type of the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.ProjectItems">
            <summary>
            Gets a ProjectItems collection for the Project object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.Properties">
            <summary>
            Gets a collection of all properties that pertain to the Project object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.UniqueName">
            <summary>
            Returns the name of project as a relative path from the directory containing the solution file to the project file
            </summary>
            <value>Unique name if project is in a valid state. Otherwise null</value>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.Object">
            <summary>
            Gets an interface or object that can be accessed by name at run time.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.get_Extender(System.String)">
            <summary>
            Gets the requested Extender object if it is available for this object.
            </summary>
            <param name="name">The name of the extender object.</param>
            <returns>An Extender object. </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.ExtenderNames">
            <summary>
            Gets a list of available Extenders for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.ExtenderCATID">
            <summary>
            Gets the Extender category ID (CATID) for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.FullName">
            <summary>
            Gets the full path and name of the Project object's file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.Saved">
            <summary>
            Gets or sets a value indicatingwhether the object has not been modified since last being saved or opened.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.ConfigurationManager">
            <summary>
            Gets the ConfigurationManager object for this Project .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.Globals">
            <summary>
            Gets the Globals object containing add-in values that may be saved in the solution (.sln) file, the project file, or in the user's profile data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.ParentProjectItem">
            <summary>
            Gets a ProjectItem object for the nested project in the host project. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.CodeModel">
            <summary>
            Gets the CodeModel object for the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.SaveAs(System.String)">
            <summary>
            Saves the project. 
            </summary>
            <param name="fileName">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>
            <exception cref="T:System.InvalidOperationException">Is thrown if the save operation failes.</exception>
            <exception cref="T:System.ArgumentNullException">Is thrown if fileName is null.</exception>        
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.Save(System.String)">
            <summary>
            Saves the project
            </summary>
            <param name="fileName">The file name of the project</param>
            <exception cref="T:System.InvalidOperationException">Is thrown if the save operation failes.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.Delete">
            <summary>
            Removes the project from the current solution. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.NotifyPropertiesDelete">
            <summary>
            For use by F# tooling only. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProject.DoSave(System.Boolean,System.String)">
            <summary>
            Saves or Save Asthe project.
            </summary>
            <param name="isCalledFromSaveAs">Flag determining which Save method called , the SaveAs or the Save.</param>
            <param name="fileName">The name of the project file.</param>        
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Project">
            <summary>
            Returns the automation project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.get_Extender(System.String)">
            <summary>
            Gets the requested Extender if it is available for this object
            </summary>
            <param name="extenderName">The name of the extender.</param>
            <returns>The extender object.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Object">
            <summary>
            Gets an object that can be accessed by name at run time.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Document">
            <summary>
            Gets the Document associated with the item, if one exists.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.FileCount">
            <summary>
            Gets the number of files associated with a ProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Properties">
            <summary>
            Gets a collection of all properties that pertain to the object. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.FileCodeModel">
            <summary>
            Gets the FileCodeModel object for the project item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.ProjectItems">
            <summary>
            Gets a ProjectItems for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Kind">
            <summary>
            Gets a GUID string indicating the kind or type of the object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Save(System.String)">
            <summary>
            Saves the project item. 
            </summary>
            <param name="fileName">The name with which to save the project or project item.</param>
            <remarks>Implemented by subclasses.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Collection">
            <summary>
            Gets the ProjectItems collection containing the ProjectItem object supporting this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.ExtenderNames">
            <summary>
            Gets a list of available Extenders for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.ConfigurationManager">
            <summary>
            Gets the ConfigurationManager object for this ProjectItem. 
            </summary>
            <remarks>We do not support config management based per item.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.ContainingProject">
            <summary>
            Gets the project hosting the ProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Saved">
            <summary>
            Gets or sets a value indicating whether or not the object has been modified since last being saved or opened.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.ExtenderCATID">
            <summary>
            Gets the Extender category ID (CATID) for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.SubProject">
            <summary>
            If the project item is the root of a subproject, then the SubProject property returns the Project object for the subproject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.IsDirty">
            <summary>
            For use by F# tooling only. Checks if the document associated to this item is dirty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Remove">
            <summary>
            Removes the project item from hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Delete">
            <summary>
            Removes the item from its project and its storage. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.SaveAs(System.String)">
            <summary>
            Saves the project item.
            </summary>
            <param name="newFileName">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten.</param>
            <returns>true if save was successful</returns>
            <remarks>This method is implemented on subclasses.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.get_IsOpen(System.String)">
            <summary>
            Gets a value indicating whether the project item is open in a particular view type. 
            </summary>
            <param name="viewKind">A Constants.vsViewKind* indicating the type of view to check.</param>
            <returns>A Boolean value indicating true if the project is open in the given view type; false if not. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.get_FileNames(System.Int16)">
            <summary>
            Gets the full path and names of the files associated with a project item.
            </summary>
            <param name="index"> The index of the item</param>
            <returns>The full path of the associated item</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is thrown if index is not one</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.ExpandView">
            <summary>
            Expands the view of Solution Explorer to show project items. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItem`1.Open(System.String)">
            <summary>
            Opens the project item in the specified view. Not implemented because this abstract class dont know what to open
            </summary>
            <param name="ViewKind">Specifies the view kind in which to open the item</param>
            <returns>Window object</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItems">
            <summary>
            Contains ProjectItem objects
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItems.AddFromTemplate(System.String,System.String)">
            <summary>
            Creates a new project item from an existing item template file and adds it to the project. 
            </summary>
            <param name="fileName">The full path and file name of the template project file.</param>
            <param name="name">The file name to use for the new project item.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItems.AddFolder(System.String,System.String)">
            <summary>
            Adds a folder to the collection of ProjectItems with the given name.
            
            The kind must be null, empty string, or the string value of vsProjectItemKindPhysicalFolder.
            Virtual folders are not supported by this implementation.
            </summary>
            <param name="name">The name of the new folder to add</param>
            <param name="kind">A string representing a Guid of the folder kind.</param>
            <returns>A ProjectItem representing the newly added folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItems.AddFromFileCopy(System.String)">
            <summary>
            Copies a source file and adds it to the project.
            </summary>
            <param name="filePath">The path and file name of the project item to be added.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItems.AddFromFile(System.String)">
            <summary>
            Adds a project item from a file that is installed in a project directory structure. 
            </summary>
            <param name="fileName">The file name of the item to add as a project item. </param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItems.AddItem(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION)">
            <summary>
            Adds an item to the project.
            </summary>
            <param name="path">The full path of the item to add.</param>
            <param name="op">The VSADDITEMOPERATION to use when adding the item.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItems.EvaluateAddResult(Microsoft.VisualStudio.Shell.Interop.VSADDRESULT,System.String)">
            <summary>
            Evaluates the result of an add operation.
            </summary>
            <param name="result">The VSADDRESULT returned by the Add methods</param>
            <param name="path">The full path of the item added.</param>
            <returns>A ProjectItem object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectItems.GetTemplateNoZip(System.String)">
            <summary>
            Removes .zip extensions from the components of a path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties">
            <summary>
            Contains all of the properties of a given object that are contained in a generic collection of properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.Target">
            <summary>
            Defines the NodeProperties object that contains the defines the properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.Node">
            <summary>
            The hierarchy node for the object which properties this item represent
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.Properties">
            <summary>
            Defines a dictionary of the properties contained.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.Application">
            <summary>
            For use by F# tooling only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.Count">
            <summary>
            Gets a value indicating the number of objects in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.GetEnumerator">
            <summary>
            Gets an enumeration for items in a collection. 
            </summary>
            <returns>An enumerator. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.Item(System.Object)">
            <summary>
            Returns an indexed member of a Properties collection. 
            </summary>
            <param name="index">The index at which to return a mamber.</param>
            <returns>A Property object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.AddPropertiesFromType(System.Type)">
            <summary>
            Add properties to the collection of properties filtering only those properties which are com-visible and AutomationBrowsable
            </summary>
            <param name="targetType">The type of NodeProperties the we should filter on</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperties.AddProperty(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new OAProperty object and adds it to the current list of properties
            </summary>
            <param name="propertyInfo">The property to be associated with an OAProperty object</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.Application">
            <summary>
            For use by F# tooling only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.Collection">
            <summary>
            Gets the Collection containing the Property object supporting this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Returns one element of a list. 
            </summary>
            <param name="index1">The index of the item to display.</param>
            <param name="index2">The index of the item to display. Reserved for future use.</param>
            <param name="index3">The index of the item to display. Reserved for future use.</param>
            <param name="index4">The index of the item to display. Reserved for future use.</param>
            <returns>The value of a property</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.let_Value(System.Object)">
            <summary>
            Setter function to set properties values. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.NumIndices">
            <summary>
            Gets the number of indices required to access the value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.Object">
            <summary>
            Sets or gets the object supporting the Property object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.Parent">
            <summary>
            For use by F# tooling only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Sets the value of the property at the specified index.
            </summary>
            <param name="index1">The index of the item to set.</param>
            <param name="index2">Reserved for future use.</param>
            <param name="index3">Reserved for future use.</param>
            <param name="index4">Reserved for future use.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProperty.Value">
            <summary>
            Gets or sets the value of the property returned by the Property object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAReferenceFolderItem">
            <summary>
            Contains OAReferenceItem objects 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAReferenceFolderItem.ProjectItems">
            <summary>
            Returns the project items collection of all the references defined for this project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAReferenceItem">
            <summary>
            Represents the automation object equivalent to a ReferenceNode object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAReferenceItem.Delete">
            <summary>
            Not implemented. If called throws invalid operation exception.
            </summary>    
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAReferenceItem.Open(System.String)">
            <summary>
            Not implemented. If called throws invalid operation exception.
            </summary>
            <param name="viewKind"> A Constants. vsViewKind indicating the type of view to use.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAReferenceItem.Collection">
            <summary>
            Gets the ProjectItems collection containing the ProjectItem object supporting this property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAProjectReference">
            <summary>
            Represents a project reference of the solution
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAReferenceBase`1">
            <summary>
            Represents the automation equivalent of ReferenceNode
            </summary>
            <typeparam name="RefType"></typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAReferences">
            <summary>
            Represents the automation object for the equivalent ReferenceContainerNode object
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAVSProject">
            <summary>
            Represents an automation friendly version of a language-specific project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAVSProject.Refresh">
            <summary>
            Automation may call this function but nothing to do here.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAVSProjectEvents">
            <summary>
            Provides access to language-specific project events
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.Automation.OAVSProjectItem">
            <summary>
            Represents a language-specific project item
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.BuildPropertyPageTag">
            <summary>
            Enumerated list of the properties shown on the build property page
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ComReferenceNode">
            <summary>
            This type of node is used for references to COM components.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ComReferenceNode.TypeGuid">
            <summary>
            Returns the Guid of the COM object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ComReferenceNode.InstalledFilePath">
            <summary>
            Returns the path where the COM object is installed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ComReferenceNode.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
            <summary>
            Overloaded constructor for creating a ComReferenceNode from selector data
            </summary>
            <param name="root">The Project node</param>
            <param name="selectorData">The component selctor data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ComReferenceNode.BindReferenceData">
            <summary>
            Links a reference node to the project and hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ComReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode@)">
            <summary>
            Checks if a reference is already added. The method parses all references and compares the the FinalItemSpec and the Guid.
            </summary>
            <returns>true if the assembly has already been added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ComReferenceNode.CanShowDefaultIcon">
            <summary>
            Determines if this is node a valid node for painting the default reference icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ComReferenceNode.GetProjectElementBasedOnInputFromComponentSelectorData">
            <summary>
            This is an helper method to convert the VSCOMPONENTSELECTORDATA recieved by the
            implementer of IVsComponentUser into a ProjectElement that can be used to create
            an instance of this class.
            This should not be called for project reference or reference to managed assemblies.
            </summary>
            <returns>ProjectElement corresponding to the COM component passed in</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ComReferenceNode.SetInstalledFilePath">
            <summary>
            Verify that the TypeLib is registered and set the the installed file path of the com reference.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.ProjectMgr">
            <summary>
            The associated project.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.NewConfigProperties" -->
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetProjectConfiguration(Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName)">
            <summary>
            Creates new Project Configuartion objects based on the configuration name.
            </summary>
            <param name="canonicalName">The name of the configuration</param>
            <returns>An instance of a ProjectConfig object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)">
            <summary>
            Provides access to the IVsProjectCfg interface implemented on a project's configuration object. 
            </summary>
            <param name="projectCfgCanonicalName">The canonical name of the configuration to access.</param>
            <param name="projectCfg">The IVsProjectCfg interface of the configuration identified by szProjectCfgCanonicalName.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.get_UsesIndependentConfigurations(System.Int32@)">
            <summary>
            Checks whether or not this configuration provider uses independent configurations. 
            </summary>
            <param name="usesIndependentConfigurations">true if independent configurations are used, false if they are not used. By default returns true.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.AddCfgsOfCfgName(System.String,System.String,System.Int32)">
            <summary>
            Copies an existing configuration name or creates a new one. 
            </summary>
            <param name="name">The name of the new configuration.</param>
            <param name="cloneName">the name of the configuration to copy, or a null reference, indicating that AddCfgsOfCfgName should create a new configuration.</param>
            <param name="fPrivate">Flag indicating whether or not the new configuration is private. If fPrivate is set to true, the configuration is private. If set to false, the configuration is public. This flag can be ignored.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.AddCfgsOfPlatformName(System.String,System.String)">
            <summary>
            Copies an existing platform name or creates a new one. 
            </summary>
            <param name="platformName">The name of the new platform.</param>
            <param name="clonePlatformName">The name of the platform to copy, or a null reference, indicating that AddCfgsOfPlatformName should create a new platform.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.DeleteCfgsOfCfgName(System.String)">
            <summary>
            Deletes a specified configuration name. 
            </summary>
            <param name="name">The name of the configuration to be deleted.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.DeleteCfgsOfPlatformName(System.String)">
            <summary>
            Deletes a specified platform name. 
            </summary>
            <param name="platName">The platform name to delete.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetCfgNames(System.UInt32,System.String[],System.UInt32[])">
            <summary>
            Returns the existing configurations stored in the project file.
            </summary>
            <param name="celt">Specifies the requested number of property names. If this number is unknown, celt can be zero.</param>
            <param name="names">On input, an allocated array to hold the number of configuration property names specified by celt. This parameter can also be a null reference if the celt parameter is zero. 
            On output, names contains configuration property names.</param>
            <param name="actual">The actual number of property names returned.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)">
            <summary>
            Returns the configuration associated with a specified configuration or platform name. 
            </summary>
            <param name="name">The name of the configuration to be returned.</param>
            <param name="platName">The name of the platform for the configuration to be returned.</param>
            <param name="cfg">The implementation of the IVsCfg interface.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetCfgProviderProperty(System.Int32,System.Object@)">
            <summary>
            Returns a specified configuration property. 
            </summary>
            <param name="propid">Specifies the property identifier for the property to return. For valid propid values, see __VSCFGPROPID.</param>
            <param name="var">The value of the property.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])">
            <summary>
            Returns the per-configuration objects for this object. 
            </summary>
            <param name="celt">Number of configuration objects to be returned or zero, indicating a request for an unknown number of objects.</param>
            <param name="a">On input, pointer to an interface array or a null reference. On output, this parameter points to an array of IVsCfg interfaces belonging to the requested configuration objects.</param>
            <param name="actual">The number of configuration objects actually returned or a null reference, if this information is not necessary.</param>
            <param name="flags">Flags that specify settings for project configurations, or a null reference (Nothing in Visual Basic) if no additional flag settings are required. For valid prgrFlags values, see __VSCFGFLAGS.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])">
            <summary>
            Returns one or more platform names. 
            </summary>
            <param name="celt">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>
            <param name="names">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be a null reference if the celt parameter is zero. On output, names contains platform names.</param>
            <param name="actual">The actual number of platform names returned.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])">
            <summary>
            Returns the set of platforms that are installed on the user's machine. 
            </summary>
            <param name="celt">Specifies the requested number of supported platform names. If this number is unknown, celt can be zero.</param>
            <param name="names">On input, an allocated array to hold the number of names specified by celt. This parameter can also be a null reference (Nothing in Visual Basic)if the celt parameter is zero. On output, names contains the names of supported platforms</param>
            <param name="actual">The actual number of platform names returned.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.RenameCfgsOfCfgName(System.String,System.String)">
            <summary>
            Assigns a new name to a configuration. 
            </summary>
            <param name="old">The old name of the target configuration.</param>
            <param name="newname">The new name of the target configuration.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.UnadviseCfgProviderEvents(System.UInt32)">
            <summary>
            Cancels a registration for configuration event notification. 
            </summary>
            <param name="cookie">The cookie used for registration.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)">
            <summary>
            Registers the caller for configuration event notification. 
            </summary>
            <param name="sink">Reference to the IVsCfgProviderEvents interface to be called to provide notification of configuration events.</param>
            <param name="cookie">Reference to a token representing the completed registration</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetAutomationObject(System.String,System.Object@)">
            <summary>
            Proved access to an IDispatchable object being a list of configuration properties
            </summary>
            <param name="configurationName">Combined Name and Platform for the configuration requested</param>
            <param name="configurationProperties">The IDispatchcable object</param>
            <returns>S_OK if successful</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.NotifyOnCfgNameAdded(System.String)">
            <summary>
            Called when a new configuration name was added.
            </summary>
            <param name="name">The name of configuration just added.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.NotifyOnCfgNameDeleted(System.String)">
            <summary>
            Called when a config name was deleted.
            </summary>
            <param name="name">The name of the configuration.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.NotifyOnCfgNameRenamed(System.String,System.String)">
            <summary>
            Called when a config name was renamed
            </summary>
            <param name="oldName">Old configuration name</param>
            <param name="newName">New configuration name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.NotifyOnPlatformNameAdded(System.String)">
            <summary>
            Called when a platform name was added
            </summary>
            <param name="platformName">The name of the platform.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.NotifyOnPlatformNameDeleted(System.String)">
            <summary>
            Called when a platform name was deleted
            </summary>
            <param name="platformName">The name of the platform.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetPlatformsFromProject">
            <summary>
            Gets all the platforms defined in the project
            </summary>
            <returns>An array of platform names.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetSupportedPlatformsFromProject">
            <summary>
            Return the supported platform names.
            </summary>
            <returns>An array of supported platform names.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetPlatforms(System.UInt32,System.String[],System.UInt32[],System.String[])">
            <summary>
            Common method for handling platform names.
            </summary>
            <param name="celt">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>
            <param name="names">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be null if the celt parameter is zero. On output, names contains platform names</param>
            <param name="actual">A count of the actual number of platform names returned.</param>
            <param name="platforms">An array of available platform names</param>
            <returns>A count of the actual number of platform names returned.</returns>
            <devremark>The platforms array is never null. It is assured by the callers.</devremark>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigProvider.GetPropertiesConditionedOn(System.String)">
            <summary>
            Get all the configurations in the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfigProperties">
            <summary>
            Implements the configuration dependent properties interface
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.DataCacheEntry.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DataCacheEntry.#ctor(Microsoft.VisualStudio.OLE.Interop.FORMATETC,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.DATADIR)">
            <summary>
            The IntPtr is data allocated that should be removed. It is allocated by the ProcessSelectionData method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DataCacheEntry.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DataCacheEntry.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.DataObject">
            <summary>
            Unfortunately System.Windows.Forms.IDataObject and
            Microsoft.VisualStudio.OLE.Interop.IDataObject are different...
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DragDropHelper.GetDroppedFiles(System.UInt16,Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.FSharp.ProjectSystem.DropDataType@)">
            <summary>
            Retrives data from a VS format.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DragDropHelper.GetData(System.IntPtr)">
            <summary>
            Returns the data packed after the DROPFILES structure.
            </summary>
            <param name="dropHandle"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor">
            <summary>
            The purpose of DesignPropertyDescriptor is to allow us to customize the
            display name of the property in the property grid.  None of the CLR
            implementations of PropertyDescriptor allow you to change the DisplayName.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.DisplayName">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.ComponentType">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.IsReadOnly">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.PropertyType">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.GetEditor(System.Type)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.Converter">
            <summary>
            Return type converter for property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)">
            <summary>
            Convert name to a Type object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DesignPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructor.  Copy the base property descriptor and also hold a pointer
            to it for calling its overridden abstract methods.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.DocumentManager">
            <summary>
            This abstract class handles opening, saving of items in the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.FSharp.ProjectSystem.WindowFrameShowAction)">
            <summary>
            Open a document using the standard editor. This method has no implementation since a document is abstract in this context
            </summary>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the document</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>NotImplementedException</returns>
            <remarks>See FileDocumentManager class for an implementation of this method</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.FSharp.ProjectSystem.WindowFrameShowAction)">
            <summary>
            Open a document using a specific editor. This method has no implementation.
            </summary>
            <param name="editorFlags">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>
            <param name="editorType">Unique identifier of the editor type</param>
            <param name="physicalView">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="frame">A reference to the window frame that is mapped to the document</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>NotImplementedException</returns>
            <remarks>See FileDocumentManager for an implementation of this method</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DocumentManager.Close(Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE)">
            <summary>
            Close an open document window
            </summary>
            <param name="closeFlag">Decides how to close the document</param>
            <returns>S_OK if successful, otherwise an error is returned</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DocumentManager.Save(System.Boolean)">
            <summary>
            Silently saves an open document
            </summary>
            <param name="saveIfDirty">Save the open document only if it is dirty</param>
            <remarks>The call to SaveDocData may return Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS.STG_S_DATALOSS to indicate some characters could not be represented in the current codepage</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DocumentManager.GetDocInfo(System.Boolean@,System.Boolean@,System.Boolean@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@)">
            <summary>
            Get document properties from RDT
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DocumentManager.UpdateCaption(System.IServiceProvider,System.String,System.IntPtr)">
            <summary>
            Updates the caption for all windows associated to the document.
            </summary>
            <param name="site">The service provider.</param>
            <param name="caption">The new caption.</param>
            <param name="docData">The IUnknown interface to a document data object associated with a registered document.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.DocumentManager.RenameDocument(System.IServiceProvider,System.String,System.String,System.UInt32)">
            <summary>
            Rename document in the running document table from oldName to newName.
            </summary>
            <param name="site">The service provider.</param>
            <param name="oldName">Full path to the old name of the document.</param>        
            <param name="newName">Full path to the new name of the document.</param>        
            <param name="newItemId">The new item id of the document</param>        
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager">
            <summary>
            This object is in charge of reloading nodes that have file monikers that can be listened to changes
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.ObservedItemInfo">
            <summary>
            Defines a data structure that can link a item moniker to the item and its file change cookie.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.ObservedItemInfo.itemID">
            <summary>
            Defines the id of the item that is to be reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.ObservedItemInfo.fileChangeCookie">
            <summary>
            Defines the file change cookie that is returned when listening on file changes on the nested project item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.ObservedItemInfo.ItemID">
            <summary>
            Defines the nested project item that is to be reloaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.ObservedItemInfo.FileChangeCookie">
            <summary>
            Defines the file change cookie that is returned when listenning on file changes on the nested project item.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.FileChangedOnDisk">
            <summary>
            Event that is raised when one of the observed file names have changed on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.fileChangeService">
            <summary>
            Reference to the FileChange service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.observedItems">
            <summary>
            Maps between the observed item identified by its filename (in canonicalized form) and the cookie used for subscribing 
            to the events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#FilesChanged(System.UInt32,System.String[],System.UInt32[])">
            <summary>
            Called when one of the file have changed on disk.
            </summary>
            <param name="numberOfFilesChanged">Number of files changed.</param>
            <param name="filesChanged">Array of file names.</param>
            <param name="flags">Array of flags indicating the type of changes. See _VSFILECHANGEFLAGS.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#DirectoryChanged(System.String)">
            <summary>
            Notifies clients of changes made to a directory. 
            </summary>
            <param name="directory">Name of the directory that had a change.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.ObserveItem(System.String)">
            <summary>
            Observe when the given file is updated on disk. In this case we do not care about the item id that represents the file in the hierarchy.
            </summary>
            <param name="fileName">File to observe.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.ObserveItem(System.String,System.UInt32)">
            <summary>
            Observe when the given file is updated on disk.
            </summary>
            <param name="fileName">File to observe.</param>
            <param name="id">The item id of the item to observe.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.IgnoreItemChanges(System.String,System.Boolean)">
            <summary>
            Ignore item file changes for the specified item.
            </summary>
            <param name="fileName">File to ignore observing.</param>
            <param name="ignore">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangeManager.StopObservingItem(System.String)">
            <summary>
            Stop observing when the file is updated on disk.
            </summary>
            <param name="fileName">File to stop observing.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.FileDocumentManager">
            <summary>
            This class handles opening, saving of file items in the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.FSharp.ProjectSystem.WindowFrameShowAction)">
            <summary>
            Open a file using the standard editor
            </summary>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the file</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.FSharp.ProjectSystem.WindowFrameShowAction)">
            <summary>
            Open a file with a specific editor
            </summary>
            <param name="editorFlags">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>
            <param name="editorType">Unique identifier of the editor type</param>
            <param name="physicalView">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the file</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileDocumentManager.Open(System.Boolean,System.Boolean,Microsoft.VisualStudio.FSharp.ProjectSystem.WindowFrameShowAction)">
            <summary>
            Open a file in a document window with a std editor
            </summary>
            <param name="newFile">Open the file as a new file</param>
            <param name="openWith">Use a dialog box to determine which editor to use</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.FSharp.ProjectSystem.WindowFrameShowAction)">
            <summary>
            Open a file in a document window with a std editor
            </summary>
            <param name="newFile">Open the file as a new file</param>
            <param name="openWith">Use a dialog box to determine which editor to use</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="frame">A reference to the window frame that is mapped to the file</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.FSharp.ProjectSystem.WindowFrameShowAction)">
            <summary>
            Open a file in a document window
            </summary>
            <param name="newFile">Open the file as a new file</param>
            <param name="openWith">Use a dialog box to determine which editor to use</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the file</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.FSharp.ProjectSystem.Transactional.Try``2(System.Func{``0},System.Action{``0},System.Func{``0,``1})" -->
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.Caption">
            <summary>
            overwrites of the generic hierarchyitem.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement,System.Nullable{System.UInt32})">
            <summary>
            Constructor for the FileNode
            </summary>
            <param name="root">Root of the hierarchy</param>
            <param name="element">Associated project element</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.GetAutomationObject">
            <summary>
            Get an instance of the automation object for a FileNode
            </summary>
            <returns>An instance of the Automation.OAFileNode if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.SetEditLabel(System.String)">
            <summary>
            Renames a file node.
            </summary>
            <param name="label">The new name.</param>
            <returns>An errorcode for failure or S_OK.</returns>
            <exception cref="T:System.InvalidOperationException">if the file cannot be validated</exception>
            <devremark> 
            We are going to throw instaed of showing messageboxes, since this method is called from various places where a dialog box does not make sense.
            For example the FileNodeProperties are also calling this method. That should not show directly a messagebox.
            Also the automation methods are also calling SetEditLabel
            </devremark>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.DeleteFromStorage(System.String)">
            <summary>
            Delete the item corresponding to the specified path from storage.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.SetEditLabel(System.String,System.String)">
            <summary>
            Rename the underlying document based on the change the user just made to the edit label.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.GetDocumentManager">
            <summary>
            Returns a specific Document manager to handle files
            </summary>
            <returns>Document manager object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.GetDragTargetHandlerNode">
            <summary>
            Called by the drag&amp;drop implementation to ask the node
            which is being dragged/droped over which nodes should
            process the operation.
            This allows for dragging to a node that cannot contain
            items to let its parent accept the drop, while a reference
            node delegate to the project and a folder/project node to itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.AfterSaveItemAs(System.IntPtr,System.String)">
            <summary>
            Performs a SaveAs operation of an open document. Called from SaveItem after the running document table has been updated with the new doc data.
            </summary>
            <param name="docData">A pointer to the document in the rdt</param>
            <param name="newFilePath">The new file path to the document</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.CanShowDefaultIcon">
            <summary>
            Determines if this is node a valid node for painting the default file icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.IsFileOnDisk(System.Boolean)">
            <summary>
            Determine if this item is represented physical on disk and shows a messagebox in case that the file is not present and a UI is to be presented.
            </summary>
            <param name="showMessage">true if user should be presented for UI in case the file is not present</param>
            <returns>true if file is on disk</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.IsFileOnDisk(System.String)">
            <summary>
            Determine if the file represented by "path" exist in storage.
            Override this method if your files are not persisted on disk.
            </summary>
            <param name="path">Url representing the file</param>
            <returns>True if the file exist</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.RenameFileNode(System.String,System.String,System.UInt32)">
            <summary>
            Renames the file in the hierarchy by removing old node and adding a new node in the hierarchy.
            </summary>
            <param name="oldFileName">The old file name.</param>
            <param name="newFileName">The new file name</param>
            <param name="newParentId">The new parent id of the item.</param>
            <returns>The newly added FileNode.</returns>
            <remarks>While a new node will be used to represent the item, the underlying MSBuild item will be the same and as a result file properties saved in the project file will not be lost.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.RenameChildNodes(Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode)">
            <summary>
            Rename all childnodes
            </summary>
            <param name="parentNode">The newly added Parent node.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.RecoverFromRenameFailure(System.String,System.String)">
            <summary>
            Tries recovering from a rename failure.
            </summary>
            <param name="fileThatFailed"> The file that failed to be renamed.</param>
            <param name="originalFileName">The original filenamee</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.RenameInStorage(System.String,System.String)">
            <summary>
            This should be overriden for node that are not saved on disk
            </summary>
            <param name="oldName">Previous name in storage</param>
            <param name="newName">New name in storage</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            This method should be overridden to provide the list of special files and associated flags for source control.
            </summary>
            <param name="sccFile">One of the file associated to the node.</param>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.RenameDocument(System.String,System.String)">
            <summary>
            Get's called to rename the eventually running document this hierarchyitem points to
            </summary>
            returns FALSE if the doc can not be renamed
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.RenameCaseOnlyChange(System.String)">
            <summary>
            Renames the file node for a case only change.
            </summary>
            <param name="newFileName">The new file name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode.SetNewParentOnChildNodes(Microsoft.VisualStudio.FSharp.ProjectSystem.FileNode)">
            <summary>
            Update the ChildNodes after the parent node has been renamed
            </summary>
            <param name="newFileNode">The new FileNode created as part of the rename of this node</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,System.String,Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement)">
            <summary>
            Constructor for the FolderNode
            </summary>
            <param name="root">Root node of the hierarchy</param>
            <param name="relativePath">relative path from root i.e.: "NewFolder1\\NewFolder2\\NewFolder3</param>
            <param name="element">Associated project element</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.StateIconIndex">
            <summary>
            This relates to the SCC glyph
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.GetAutomationObject">
            <summary>
            Get the automation object for the FolderNode
            </summary>
            <returns>An instance of the Automation.OAFolderNode type if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.SetEditLabel(System.String)">
            <summary>
            Rename Folder
            </summary>
            <param name="label">new Name of Folder</param>
            <returns>VSConstants.S_OK, if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            Enumerate the files associated with this node.
            A folder node is not a file and as such no file to enumerate.
            </summary>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            This method should be overridden to provide the list of special files and associated flags for source control.
            </summary>
            <param name="sccFile">One of the file associated to the node.</param>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.UpdateSccStateIcons">
            <summary>
            Recursevily walks the folder nodes and redraws the state icons
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.DeleteFolder(System.String)">
            <summary>
            Override if your node is not a file system folder so that
            it does nothing or it deletes it from your storage location.
            </summary>
            <param name="path">Path to the folder to delete</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.CreateDirectory">
            <summary>
            creates the physical directory for a folder node
            Override if your node does not use file system folder
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.CreateDirectory(System.String)">
            <summary>
            Creates a folder nodes physical directory
            Override if your node does not use file system folder
            </summary>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.RenameDirectory(System.String)">
            <summary>
            Rename the physical directory for a folder node
            Override if your node does not use file system folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FolderNode.ShowErrorMessage(System.String,System.String)">
            <summary>
            Show error message if not in automation mode, otherwise throw exception
            </summary>
            <param name="parameter">Parameter for resource string format</param>
            <returns>S_OK</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.GroupingReferenceNode">
            <summary>
            Synthetic node that represents grouping of references in project (like the whole set of assemblies for some target framework profile)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.GroupingReferenceNodeProperties">
            <summary>
            Set of properties that are shown in property grid
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.GroupingReferenceNodeProperties.GetClassName">
            <summary>
            Caption of the property grid, prints 'Reference properties' similar to C#
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode">
            <summary>
            An object that deals with user interaction via a GUI in the form a hierarchy: a parent node with zero or more child nodes, each of which
            can itself be a hierarchy.  
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.DropEffect">
            <summary>
            DropEffect as defined in oleidl.h
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.NameRelationSeparator">
            <summary>
            Defines a string that is used to separate the name relation from the extension
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ImageIndex">
            <summary>
            Return an imageindex
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.StateIconIndex">
            <summary>
            Return an state icon index
            </summary>
            <returns></returns>
            <summary>
            Sets the state icon for a file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.CanExecuteCommand">
            <summary>
            Defines whether a node can execute a command if in selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.SortPriority">
            <summary>
            Used to determine the sort order of different node types
            in the solution explorer window.
            Nodes with the same priorities are sorted based on their captions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.NodeProperties">
            <summary>
            Defines the properties attached to this node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.Object">
            <summary>
            Returns an object that is a special view over this object; this is the value
            returned by the Object property of the automation objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ExcludeNodeFromScc">
            <summary>
            Specifies if a Node is under source control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.HasParentNodeNameRelation">
            <summary>
            Defines if a node a name relation to its parent node
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode)">
            <summary>
            Overloaded ctor. 
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.CreatePropertiesObject">
            <summary>
            Creates an object derived from NodeProperties that will be used to expose properties
            spacific for this object to the property browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetIconHandle(System.Boolean)">
            <summary>
            Return an iconhandle
            </summary>
            <param name="open"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.AddChild(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            AddChild - add a node, sorted in the right location.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.RemoveChild(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Removes a node from the hierarchy.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetAutomationObject">
            <summary>
            Returns an automation object representing this node
            </summary>
            <returns>The automation object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetProperty(System.Int32)">
            <summary>
            Returns a property object based on a property id 
            </summary>
            <param name="propId">the property id of the property requested</param>
            <returns>the property object requested</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.SetProperty(System.Int32,System.Object)">
            <summary>
            Sets the value of a property for a given property id
            </summary>
            <param name="propid">the property id of the property to be set</param>
            <param name="value">value of the property</param>
            <returns>S_OK if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetGuidProperty(System.Int32,System.Guid@)">
            <summary>
            Get a guid property
            </summary>
            <param name="propid">property id for the guid property requested</param>
            <param name="guid">the requested guid</param>
            <returns>S_OK if succeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.SetGuidProperty(System.Int32,System.Guid@)">
            <summary>
            Set a guid property.
            </summary>
            <param name="propid">property id of the guid property to be set</param>
            <param name="guid">the guid to be set</param>
            <returns>E_NOTIMPL</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.SetEditLabel(System.String)">
            <summary>
            Called by the shell when a node has been renamed from the GUI
            </summary>
            <param name="label"></param>
            <returns>E_NOTIMPL</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetEditLabel">
            <summary>
            Called by the shell to get the node caption when the user tries to rename from the GUI
            </summary>
            <returns>the node cation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetMkDocument">
            <summary>
            This method is called by the interface method GetMkDocument to specify the item moniker.
            </summary>
            <returns>The moniker for this item</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.Remove(System.Boolean,System.Boolean)">
            <summary>
            Removes items from the hierarchy. Project overwrites this
            </summary>
            <param name="removeFromStorage"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetRelationalName">
            <summary>
            Returns the relational name which is defined as the first part of the caption until indexof NameRelationSeparator
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetRelationNameExtension">
            <summary>
            Returns the 'extension' of the relational name
            e.g. form1.resx returns .resx, form1.designer.cs returns .designer.cs
            </summary>
            <returns>The extension</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.CloseDocumentWindow(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Close open document frame for a specific node.
            </summary> 
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.UpdateSccStateIcons">
            <summary>
            Redraws the state icon if the node is not excluded from source control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetDragTargetHandlerNode">
            <summary>
            Called by the drag and drop implementation to ask the node
            which is being dragged/droped over which nodes should
            process the operation.
            This allows for dragging to a node that cannot contain
            items to let its parent accept the drop
            </summary>
            <returns>HierarchyNode that accept the drop handling</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.AddNewFolder(System.Action{Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode})">
            <summary>
            Add a new Folder to the project hierarchy.
            </summary>
            <returns>S_OK if succeeded, otherwise an error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.DoDefaultAction">
            <summary>
            Overwritten in subclasses
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ExcludeFromProject">
            <summary>
            Handles the exclude from project command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ShowInDesigner(System.Collections.Generic.IList{Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode})">
            <summary>
            Handles the Show in Designer command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.PrepareSelectedNodesForClipBoard">
            <summary>
            Prepares a selected node for clipboard. 
            It takes the the project reference string of this item and adds it to a stringbuilder. 
            </summary>
            <returns>A stringbuilder.</returns>
            <devremark>This method has to be public since seleceted nodes will call it.</devremark>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetCanonicalName">
            <summary>
            Returns the Cannonical Name
            </summary>
            <returns>Cannonical Name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetDocumentManager">
            <summary>
            Factory method for the Document Manager object
            </summary>
            <returns>null object, since a hierarchy node does not know its kind of document</returns>
            <remarks>Must be overriden by derived node classes if a document manager is needed</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.DisplayContextMenu(System.Collections.Generic.IList{Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode},System.IntPtr)">
            <summary>
            Displays the context menu.
            </summary>
            <param name="selectedNodes">list of selected nodes.</param>
            <param name="pointerToVariant">contains the location (x,y) at which to show the menu.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.POINTS)">
            <summary>
            Shows the specified context menu at a specified location.
            </summary>
            <param name="menuId">The context menu ID.</param>
            <param name="menuGroup">The GUID of the menu group.</param>
            <param name="points">The location at which to show the menu.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Handles command execution.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmd">The command to be executed.</param>
            <param name="nCmdexecopt">Values describe how the object should execute the command.</param>
            <param name="pvaIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="pvaOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ExecCommandThatDependsOnSelectedNodes(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.FSharp.ProjectSystem.CommandOrigin,System.Collections.Generic.IList{Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode},System.Boolean@)">
            <summary>
            Executes a command that can only be executed once the whole selection is known.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmdId">The command to be executed.</param>
            <param name="cmdExecOpt">Values describe how the object should execute the command.</param>
            <param name="vaIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="vaOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <param name="commandOrigin">The origin of the command. From IOleCommandTarget or hierarchy.</param>
            <param name="selectedNodes">The list of the selected nodes.</param>
            <param name="handled">An out parameter specifying that the command was handled.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ExecCommandIndependentOfSelection(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.FSharp.ProjectSystem.CommandOrigin,System.Boolean@)">
            <summary>
            Executes command that are independent of a selection.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmdId">The command to be executed.</param>
            <param name="cmdExecOpt">Values describe how the object should execute the command.</param>
            <param name="vaIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="vaOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <param name="commandOrigin">The origin of the command. From IOleCommandTarget or hierarchy.</param>
            <param name="handled">An out parameter specifying that the command was handled.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.InternalExecCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.FSharp.ProjectSystem.CommandOrigin)">
            <summary>
            The main entry point for command excection. Gets called from the IVsUIHierarchy and IOleCommandTarget methods.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmdId">The command to be executed.</param>
            <param name="cmdExecOpt">Values describe how the object should execute the command.</param>
            <param name="vaIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="vaOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <param name="commandOrigin">The origin of the command. From IOleCommandTarget or hierarchy.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.QueryStatusCommandFromOleCommandTarget(System.Guid,System.UInt32,System.Boolean@)">
            <summary>
            Handles menus originating from IOleCommandTarget.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmd">The command to be executed.</param>
            <param name="handled">Specifies whether the menu was handled.</param>
            <returns>A QueryStatusResult describing the status of the menu.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.DisableCommandOnNodesThatDoNotSupportMultiSelection(System.Guid,System.UInt32,System.Collections.Generic.IList{Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode},System.Boolean@)">
            <summary>
            Specifies which command does not support multiple selection and should be disabled if multi-selected.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmd">The command to be executed.</param>
            <param name="selectedNodes">The list of selected nodes.</param>
            <param name="handled">Specifies whether the menu was handled.</param>
            <returns>A QueryStatusResult describing the status of the menu.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.FSharp.ProjectSystem.QueryStatusResult@)">
            <summary>
            Handles command status on a node. Should be overridden by descendant nodes. If a command cannot be handled then the base should be called.
            </summary>
            <param name="cmdGroup">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>
            <param name="cmd">The command to query status for.</param>
            <param name="pCmdText">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>
            <param name="result">An out parameter specifying the QueryStatusResult of the command.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.DisableCmdInCurrentMode(System.Guid,System.UInt32)">
            <summary>
            Disables commands when the project is in run/break mode.
            </summary>/
            <param name="commandGroup">Unique identifier of the command group</param>
            <param name="command">The command to be executed.</param>
            <returns>A QueryStatusResult describing the status of the menu.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.QueryStatusSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr,Microsoft.VisualStudio.FSharp.ProjectSystem.CommandOrigin)">
            <summary>
            Queries the object for the command status on a list of selected nodes.
            </summary>
            <param name="cmdGroup">A unique identifier of the command group.</param>
            <param name="cCmds">The number of commands in the prgCmds array</param>
            <param name="prgCmds">A caller-allocated array of OLECMD structures that indicate the commands for which the caller requires status information. This method fills the cmdf member of each structure with values taken from the OLECMDF enumeration</param>
            <param name="pCmdText">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>
            <param name="commandOrigin">Specifies the origin of the command. Either it was called from the QueryStatusCommand on IVsUIHierarchy or from the IOleCommandTarget</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.QueryStatusSelectionOnNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode},System.Guid,System.UInt32,System.IntPtr)">
            <summary>
            Queries the selected nodes for the command status. 
            A command is supported iff any nodes supports it.
            A command is enabled iff all nodes enable it.
            A command is invisible iff any node sets invisibility.
            A command is latched only if all are latched.
            </summary>
            <param name="selectedNodes">The list of selected nodes.</param>
            <param name="cmdGroup">A unique identifier of the command group.</param>
            <param name="cmd">The command id to query for.</param>
            <param name="pCmdText">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>
            <returns>Retuns the result of the query on the slected nodes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.CanShowDefaultIcon">
            <summary>
            Overwrite this method to tell that you support the default icon for this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.AfterSaveItemAs(System.IntPtr,System.String)">
            <summary>
            Performs save as operation for an item after the save as dialog has been processed.
            </summary>
            <param name="docData">A pointer to the rdt</param>
            <param name="newName">The newName of the item</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing">Is the Dispose called by some public member, or it is called by from GC.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetAddFileFlags(System.String[])">
            <summary>
            Sets the VSADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnAddFiles
            </summary>
            <param name="files">The files to which an array of VSADDFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetQueryAddFileFlags(System.String[])">
            <summary>
            Sets the VSQUERYADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryAddFiles
            </summary>
            <param name="files">The files to which an array of VSADDFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetRemoveFileFlags(System.String[])">
            <summary>
            Sets the VSREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnRemoveFiles
            </summary>
            <param name="files">The files to which an array of VSREMOVEFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetQueryRemoveFileFlags(System.String[])">
            <summary>
            Sets the VSQUERYREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryRemoveFiles
            </summary>
            <param name="files">The files to which an array of VSQUERYREMOVEFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            This method should be overridden to provide the list of files and associated flags for source control.
            </summary>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            This method should be overridden to provide the list of special files and associated flags for source control.
            </summary>
            <param name="sccFile">One of the file associated to the node.</param>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.DeleteFromStorage(System.String)">
            <summary>
            Delete the item corresponding to the specified path from storage.
            </summary>
            <param name="path">Url of the item to delete</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.CopyToClipboard">
            <summary>
            Handle the Copy operation to the clipboard
            This method is typically overriden on the project node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.CutToClipboard">
            <summary>
            Handle the Cut operation to the clipboard
            This method is typically overriden on the project node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.PasteFromClipboard(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Handle the paste from Clipboard command.
            This method is typically overriden on the project node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.AllowPasteCommand">
            <summary>
            Determines if the paste command should be allowed.
            This method is typically overriden on the project node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.RegisterClipboardNotifications(System.Boolean)">
            <summary>
            Register/Unregister for Clipboard events for the UiHierarchyWindow (solution explorer)
            This method is typically overriden on the project node
            </summary>
            <param name="value">true for register, false for unregister</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ReDraw(Microsoft.VisualStudio.FSharp.ProjectSystem.UIHierarchyElement)">
            <summary>
            Causes the hierarchy to be redrawn.
            </summary>
            <param name="element">Used by the hierarchy to decide which element to redraw</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.FindChildByProjectElement(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement)">
            <summary>
            Finds a non virtual hierarchy item by its project element.
            </summary>
            <param name="node">The Project element to find</param>
            <returns>The node found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.ParseCanonicalName(System.String,System.UInt32@)">
            <summary>
            the canonicalName of an item is it's URL, or better phrased,
            the persistence data we put into @RelPath, which is a relative URL
            to the root project
            returning the itemID from this means scanning the list
            </summary>
            <param name="name"></param>
            <param name="itemId"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)">
            <summary>
            Determines whether the hierarchy item changed. 
            </summary>
            <param name="itemId">Item identifier of the hierarchy item contained in VSITEMID.</param>
            <param name="docData">Pointer to the IUnknown interface of the hierarchy item.</param>
            <param name="isDirty">true if the hierarchy item changed.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)">
            <summary>
            Saves the hierarchy item to disk. 
            </summary>
            <param name="saveFlag">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>
            <param name="silentSaveAsName">New filename when doing silent save as</param>
            <param name="itemid">Item identifier of the hierarchy item saved from VSITEMID.</param>
            <param name="docData">Item identifier of the hierarchy item saved from VSITEMID.</param>
            <param name="cancelled">[out] true if the save action was canceled.</param>
            <returns>[out] true if the save action was canceled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            CommandTarget.Exec is called for most major operations if they are NOT UI based. Otherwise IVSUInode::exec is called first
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <summary>
            Queries the object for the command status
            </summary>
            <remarks>we only support one command at a time, i.e. the first member in the OLECMD array</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.FindNodesOfType``1(System.Collections.Generic.List{``0})">
            <summary>
            Recursively find all nodes of type T
            </summary>
            <typeparam name="T">The type of hierachy node being serched for</typeparam>
            <param name="nodes">A list of nodes of type T</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.AllChildren">
            <summary>
            All nodes that are direct children of this node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode.AllDescendants">
            <summary>
            All nodes that are my children, plus their children, ad infinitum.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger">
            <summary>
            This class implements an MSBuild logger that output events to VS outputwindow and tasklist.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.BuildVerbosityRegistryRoot">
            <summary>
            When building from within VS, setting this will
            enable the logger to retrive the verbosity from
            the correct registry hive.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.OutputWindowPane">
            <summary>
            Set to null to avoid writing to the output window
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            This is the delegate for error events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            This is the delegate for warning events.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.DefaultCompilerError">
            <summary>
            Private internal class for capturing full compiler error line/column span information
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.AddToErrorList(Microsoft.Build.Framework.BuildEventArgs,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add the error/warning to the error list and potentially to the output window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            This is the delegate for Message event types
            </summary>		
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)">
            <summary>
            This is the delegate for BuildStartedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)">
            <summary>
            This is the delegate for BuildFinishedHandler events.
            </summary>
            <param name="sender"></param>
            <param name="buildEvent"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)">
            <summary>
            This is the delegate for ProjectStartedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)">
            <summary>
            This is the delegate for ProjectFinishedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)">
            <summary>
            This is the delegate for TargetStartedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)">
            <summary>
            This is the delegate for TargetFinishedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)">
            <summary>
            This is the delegate for TaskStartedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)">
            <summary>
            This is the delegate for TaskFinishedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.CustomHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            This is the delegate for CustomHandler events.
            </summary>
            <param name="sender"></param>
            <param name="buildEvent"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.LogAtImportance(Microsoft.Build.Framework.MessageImportance)">
            <summary>
            This method takes a MessageImportance and returns true if messages
            at importance i should be loggeed.  Otherwise return false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.LogEvent(System.Object,Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            This is the method that does the main work of logging an event
            when one is sent to this logger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.ShutdownLogger">
            <summary>
            This is called when the build complete.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.GetFormattedErrorMessage(Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.DefaultCompilerError)">
            <summary>
            Format error messages for the task list
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.FormatMessage(System.String)">
            <summary>
            Formats the message that is to be output.
            </summary>
            <param name="message">The message string.</param>
            <returns>The new message</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IDEBuildLogger.SetVerbosity">
            <summary>
            Sets the verbosity level.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputWindowLogger">
            <summary>
            Helper for logging to the output window
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputWindowLogger.CreateUpToDateCheckLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Helper to create output window logger for project up-to-date check
            </summary>
            <param name="pane">Output window pane to use for logging</param>
            <returns>Logger</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputWindowLogger.#ctor(System.Func{System.Boolean},Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Creates a logger instance
            </summary>
            <param name="shouldLog">Predicate that will be called when logging. Should return true if logging is to be performed, false otherwise.</param>
            <param name="pane">The output pane where logging should be targeted</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputWindowLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Logs a message to the output window, if the original predicate returns true
            </summary>
            <param name="message">Log message, can be a String.Format-style format string</param>
            <param name="args">Optional aruments for format string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ImageHandler.#ctor">
            <summary>
            Builds an empty ImageHandler object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ImageHandler.#ctor(System.IO.Stream)">
            <summary>
            Builds an ImageHandler object from a Stream providing the bitmap that
            stores the images for the image list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ImageHandler.#ctor(System.Windows.Forms.ImageList)">
            <summary>
            Builds an ImageHandler object from an ImageList object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ImageHandler.Close">
            <summary>
            Closes the ImageHandler object freeing its resources.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ImageHandler.ImageList">
            <summary>
            Get or set the ImageList object for this ImageHandler.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ImageHandler.GetIconHandle(System.Int32)">
            <summary>
            Returns the handle to an icon build from the image of index
            iconIndex in the image list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.IBuildDependencyOnProjectContainer">
            <summary>
            This interface defines the rules for handling build dependency on a project container.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.IBuildDependencyOnProjectContainer.BuildNestedProjectsOnBuild">
            <summary>
            Defines whether the nested projects should be build with the parent project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IBuildDependencyOnProjectContainer.EnumNestedHierachiesForBuildDependency">
            <summary>
            Enumerates the nested hierachies present that will participate in the build dependency update.
            </summary>
            <returns>A list of hierrachies.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.IBuildDependencyUpdate">
            <summary>
            Interface for manipulating build dependency
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.IBuildDependencyUpdate.BuildDependencies">
            <summary>
            Defines a container for storing BuildDependencies
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IBuildDependencyUpdate.AddBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)">
            <summary>
            Adds a BuildDependency to the container
            </summary>
            <param name="dependency">The dependency to add</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.IBuildDependencyUpdate.RemoveBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)">
            <summary>
            Removes the builddependency from teh container.
            </summary>
            <param name="dependency">The dependency to add</param>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.IReferenceContainerProvider">
            <summary>
            Provides access to the reference data container.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.IReferenceContainer">
            <summary>
            Defines a container for manipulating references
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.IProjectEvents">
            <summary>
            Defines the events that are internally defined for communication with other subsytems.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.FSharp.ProjectSystem.IProjectEvents.AfterProjectFileOpened">
            <summary>
            Event raised just after the project file opened.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.FSharp.ProjectSystem.IProjectEvents.BeforeProjectFileClosed">
            <summary>
            Event raised before the project file closed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.IProjectEventsListener">
            <summary>
            Defines the interface that will specify ehethrr the object is a project events listener.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.IProjectEventsListener.IsProjectEventsListener">
            <summary>
            Is the object a project events listener.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ISingleFileGenerator">
            <summary>
            Defines support for single file generator
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ISingleFileGenerator.RunGenerator(System.String)">
            <summary>
             Runs the generator on the item represented by the document moniker.
             </summary>
             <param name="document"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.LinkedFileNode">
            <summary>
            A file that may or may not be a linked file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.LinkedFileNode.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement,System.Nullable{System.UInt32})">
            <summary>
            Constructor for the LinkedFileNode
            </summary>
            <param name="root">Root of the hierarchy</param>
            <param name="e">Associated project element</param>
            <param name="hierarchyId">Optional hierarchy id - used during rename</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.LinkedFileNode.IsLinkFile">
            <summary>
            Is this file a link file?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.LinkedFileNode.SetIsLinkedFile(System.Boolean)">
            <summary>
            Sets this file to linked or nonlinked.
            </summary>
            <param name="isLinked"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.LinkedFileNode.GetProperty(System.Int32)">
            <summary>
            Override GetProperty so we can support linked files.
            </summary>
            <param name="propId"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.LinkedFileNode.ExcludeNodeFromScc">
            <summary>
            Specifies if a Node is under source control.  For
            files we remove any items which are linked or imported
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.LinkedFileNode.IsImported">
            <summary>
            Used to determine if the node is imported via an MSBuild Import statement.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.LocalizableProperties">
            <summary>
            Enables a managed object to expose properties and attributes for COM objects.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.IEventSource`1">
            <summary>
            Class used to identify a source of events of type SinkType.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.OLECMDTEXT">
            <devdoc>
            Helper class for setting the text parameters to OLECMDTEXT structures.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.OLECMDTEXT.OLECMDTEXTF">
            <summary>
            Flags for the OLE command text
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_NONE">
            <summary>No flag</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_NAME">
            <summary>The name of the command is required.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_STATUS">
            <summary>A description of the status is required.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.OLECMDTEXT.GetFlags(System.IntPtr)">
            <summary>
            Gets the flags of the OLECMDTEXT structure
            </summary>
            <param name="pCmdTextInt">The structure to read.</param>
            <returns>The value of the flags.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.OLECMDTEXT.GetText(System.IntPtr)">
            <devdoc>
            Accessing the text of this structure is very cumbersome.  Instead, you may
            use this method to access an integer pointer of the structure.
            Passing integer versions of this structure is needed because there is no
            way to tell the common language runtime that there is extra data at the end of the structure.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.OLECMDTEXT.SetText(System.IntPtr,System.String)">
            <devdoc>
            Accessing the text of this structure is very cumbersome.  Instead, you may
            use this method to access an integer pointer of the structure.
            Passing integer versions of this structure is needed because there is no
            way to tell the common language runtime that there is extra data at the end of the structure.
            </devdoc>
            <summary>
            Sets the text inside the structure starting from an integer pointer.
            </summary>
            <param name="pCmdTextInt">The integer pointer to the position where to set the text.</param>
            <param name="text">The text to set.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.tagOLECMDF">
            <devdoc>
            OLECMDF enums for IOleCommandTarget
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.StreamConsts">
            <devdoc>
            Constants for stream usage.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.GetAbsolutePath(System.String)">
            <devdoc>
            This method takes a file URL and converts it to an absolute path.  The trick here is that
            if there is a '#' in the path, everything after this is treated as a fragment.  So
            we need to append the fragment to the end of the path.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.GetLocalPath(System.String)">
            <devdoc>
            This method takes a file URL and converts it to a local path.  The trick here is that
            if there is a '#' in the path, everything after this is treated as a fragment.  So
            we need to append the fragment to the end of the path.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.IsSamePath(System.String,System.String)">
            <devdoc>
            Please use this "approved" method to compare file names.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.ICodeClassBase">
            --------------------------------------------------------------------------
             ICodeClassBase:
            --------------------------------------------------------------------------
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.VSTASKBITMAP">
            <summary>
            Specifies options for a bitmap image associated with a task item.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.ExtendedSpecialFolder">
            <summary>
            Defines the values that are not supported by the System.Environment.SpecialFolder enumeration
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.ExtendedSpecialFolder.CommonStartup">
            <summary>
            Identical to CSIDL_COMMON_STARTUP
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.ExtendedSpecialFolder.Windows">
            <summary>
            Identical to CSIDL_WINDOWS 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            Changes the parent window of the specified child window.
            </summary>
            <param name="hWnd">Handle to the child window.</param>
            <param name="hWndParent">Handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>
            <returns>A handle to the previous parent window indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NativeMethods.GetBinaryType(System.String,System.UInt32@)">
            <summary>
            Indicates whether the file type is binary or not
            </summary>
            <param name="lpApplicationName">Full path to the file to check</param>
            <param name="lpBinaryType">If file isbianry the bitness of the app is indicated by lpBinaryType value.</param>
            <returns>True if the file is binary false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.AutomationBrowsableAttribute">
            <summary>
            All public properties on Nodeproperties or derived classes are assumed to be used by Automation by default.
            Set this attribute to false on Properties that should not be visible for Automation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.BuildAction">
            <summary>
             Encapsulates BuildAction enumeration
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.NodeProperties">
            <summary>
            To create your own localizable node properties, subclass this and add public properties
            decorated with your own localized display name, category and description attributes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.NodeProperties.Name">
            <summary>
            Used by Property Pages Frame to set it's title bar. The Caption of the Hierarchy Node is returned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NodeProperties.GetBuildMacroValue(System.String,System.String@)">
            <summary>
            We support this interface so the build event command dialog can display a list
            of tokens for the user to select from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NodeProperties.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
            <summary>
            Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration independent.
            </summary>
            <param name="pages">The pages to return.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NodeProperties.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)">
            <summary>
            Maps back to the hierarchy or project item object corresponding to the browse object.
            </summary>
            <param name="hier">Reference to the hierarchy object.</param>
            <param name="itemid">Reference to the project item.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NodeProperties.GetComponentName">
            <summary>
            Get the Caption of the Hierarchy Node instance. If Caption is null or empty we delegate to base
            </summary>
            <returns>Caption of Hierarchy node instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.NodeProperties.GetCommonPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
            <summary>
            Retrieves the common property pages. The NodeProperties is the BrowseObject and that will be called to support 
            configuration independent properties.
            </summary>
            <param name="pages">The pages to return.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.BuildActionPropertyDescriptor.Converter">
            <summary>
            Return type converter for property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.BuildActionPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,Microsoft.VisualStudio.FSharp.ProjectSystem.BuildActionConverter)">
            <summary>
            Constructor.  Copy the base property descriptor and also hold a pointer
            to it for calling its overridden abstract methods.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.BuildableNodeProperties.BuildAction">
            <summary>
            Specifies the build action as a projBuildAction so that automation can get the
            expected enum value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNodeProperties.GetEditor(System.Type)">
            <summary>
            ICustomTypeDescriptor.GetEditor
            To enable the "Property Pages" button on the properties browser
            the browse object (project properties) need to be unmanaged
            or it needs to provide an editor of type ComponentEditor.
            </summary>
            <param name="editorBaseType">Type of the editor</param>
            <returns>Editor</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.OleServiceProvider.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.OleServiceProvider.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the given service to the service container.
            </summary>
            <param name="serviceType">The type of the service to add.</param>
            <param name="serviceInstance">An instance of the service.</param>
            <param name="shouldDisposeServiceInstance">true if the Dipose of the service provider is allowed to dispose the sevice instance.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.OleServiceProvider.RemoveService(System.Type)">
            <devdoc>
            Removes the given service type from the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.OleServiceProvider.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.Output.CanonicalName">
            <summary>
            Easy access to canonical name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Output.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,Microsoft.Build.Execution.ProjectItemInstance)">
            <summary>
            Constructor for IVSOutput2 implementation
            </summary>
            <param name="projectManager">Project that produce this output</param>
            <param name="outputAssembly">MSBuild generated item corresponding to the output assembly (by default, these would be of type MainAssembly</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Output.GetMetadata(System.String)">
            <summary>
            Easy access to output properties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Output.get_DeploySourceURL(System.String@)">
            <summary>
            This path must start with file:/// if it wants other project
            to be able to reference the output on disk.
            If the output is not on disk, then this requirement does not
            apply as other projects probably don't know how to access it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputGroup">
            <summary>
            Allows projects to group outputs according to usage.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputGroup.ProjectCfg">
            <summary>
            Get the project configuration object associated with this output group
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputGroup.Project">
            <summary>
            Get the project object that produces this output group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputGroup.TargetName">
            <summary>
            Gets the msbuild target name which is assciated to the outputgroup.
            ProjectNode defines a static collection of output group names and their associated MsBuild target
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputGroup.CanonicalName">
            <summary>
            Easy access to the canonical name of the group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputGroup.Outputs">
            <summary>
            Easy access to outputs
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputGroup.#ctor(System.String,System.String,Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig)">
            <summary>
            Constructor for IVSOutputGroup2 implementation
            </summary>
            <param name="outputName">Name of the output group. See VS_OUTPUTGROUP_CNAME_Build in vsshell.idl for the list of standard values</param>
            <param name="msBuildTargetName">MSBuild target name</param>
            <param name="projectManager">Project that produce this output</param>
            <param name="configuration">Configuration that produce this output</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName.TrySplitConfigurationCanonicalName(System.String,System.String@,System.String@)">
            <summary>
            Splits the canonical configuration name into platform and configuration name.
            </summary>
            <param name="canonicalName">The canonicalName name.</param>
            <param name="configName">The name of the configuration.</param>
            <param name="platformName">The name of the platform.</param>
            <returns>true if successfull.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.SetPropertyUnderCondition(System.String,System.String,System.String)">
            <summary>
            Emulates the behavior of SetProperty(name, value, condition) on the old MSBuild object model.
            This finds a property group with the specified condition (or creates one if necessary) then sets the property in there.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.IsFlavorDirty(Microsoft.VisualStudio.Shell.Interop._PersistStorageType)">
            <summary>
            If flavored, and if the flavor config can be dirty, ask it if it is dirty
            </summary>
            <param name="storageType">Project file or user file</param>
            <returns>0 = not dirty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.GetXmlFragment(System.Guid,Microsoft.VisualStudio.Shell.Interop._PersistStorageType,System.String@)">
            <summary>
            If flavored, ask the flavor if it wants to provide an XML fragment
            </summary>
            <param name="flavor">Guid of the flavor</param>
            <param name="storageType">Project file or user file</param>
            <param name="fragment">Fragment that the flavor wants to save</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
            <summary>
            Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration dependent.
            </summary>
            <param name="pages">The pages to return.</param>
            <returns>VSConstants.S_OK</returns>        
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.get_DisplayName(System.String@)">
            <summary>
            The display name is a two part item
            first part is the config name, 2nd part is the platform name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.DebugLaunch(System.UInt32)">
            <summary>
            Called by the vs shell to start debugging (managed or unmanaged).
            Override this method to support other debug engines.
            </summary>
            <param name="grfLaunch">A flag that determines the conditions under which to start the debugger. For valid grfLaunch values, see __VSDBGLAUNCHFLAGS</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.QueryDebugLaunch(System.UInt32,System.Int32@)">
            <summary>
            Determines whether the debugger can be launched, given the state of the launch flags.
            </summary>
            <param name="flags">Flags that determine the conditions under which to launch the debugger. 
            For valid grfLaunch values, see __VSDBGLAUNCHFLAGS or __VSDBGLAUNCHFLAGS2.</param>
            <param name="fCanLaunch">true if the debugger can be launched, otherwise false</param>
            <returns>S_OK if the method succeeds, otherwise an error code</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.GetCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg@)">
            <summary>
            Maps back to the configuration corresponding to the browse object. 
            </summary>
            <param name="cfg">The IVsCfg object represented by the browse object</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)">
            <summary>
            Maps back to the hierarchy or project item object corresponding to the browse object.
            </summary>
            <param name="hier">Reference to the hierarchy object.</param>
            <param name="itemid">Reference to the project item.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.GetCfgPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
            <summary>
            Retrieves the configuration dependent property pages.
            </summary>
            <param name="pages">The pages to return.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#Close">
            <summary>
            This is called to let the flavored config let go
            of any reference it may still be holding to the base config
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#get_CfgType(System.Guid@,System.IntPtr@)">
            <summary>
            Actual implementation of get_CfgType.
            When not flavored or when the flavor delegate to use
            we end up creating the requested config if we support it.
            </summary>
            <param name="iidCfg">IID representing the type of config object we should create</param>
            <param name="ppCfg">Config object that the method created</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.BuildableProjectConfig.RefreshReferences(Microsoft.VisualStudio.FSharp.ProjectSystem.BuildResult)">
            <summary>
            Refreshes references and redraws them correctly.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement">
            <summary>
            This class represent a project item (usualy a file) and allow getting and
            setting attribute on it.
            This class allow us to keep the public details of our items hidden from
            our derived classes.
            While the class itself is public so it can be manipulated by derived classes,
            its public constructors make sure it can only be created from within the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,System.String,System.String)">
            <summary>
            Constructor to create a new MSBuild.BuildItem and add it to the project
            Only have public constructors as the only one who should be creating
            such object is the project itself (see Project.CreateFileNode()).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,Microsoft.Build.Evaluation.ProjectItem,System.Boolean)">
            <summary>
            Constructor to Wrap an existing MSBuild.BuildItem
            Only have public constructors as the only one who should be creating
            such object is the project itself (see Project.CreateFileNode()).
            </summary>
            <param name="project">Project that owns this item</param>
            <param name="existingItem">an MSBuild.BuildItem; can be null if virtualFolder is true</param>
            <param name="virtualFolder">Is this item virtual (such as reference folder)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement.RemoveFromProjectFile">
            <summary>
            Calling this method remove this item from the project file.
            Once the item is delete, you should not longer be using it.
            Note that the item should be removed from the hierarchy prior to this call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement.SetMetadata(System.String,System.String)">
            <summary>
            Set an attribute on the project element
            </summary>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">Value to give to the attribute</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement.GetMetadata(System.String)">
            <summary>
            Get the value of an attribute on a project element
            </summary>
            <param name="attributeName">Name of the attribute to get the value for</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement.GetMetadataAndThrow(System.String,System.Exception)">
            <summary>
            Gets the attribute and throws the handed exception if the exception if the attribute is empty or null.
            </summary>
            <param name="attributeName">The name of the attribute to get.</param>
            <param name="exception">The exception to be thrown if not found or empty.</param>
            <returns>The attribute if found</returns>
            <remarks>The method will throw an Exception and neglect the passed in exception if the attribute is deleted</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement.RefreshProperties">
            <summary>
            Reevaluate all properties for the current item
            This should be call if you believe the property for this item
            may have changed since it was created/refreshed, or global properties
            this items depends on have changed.
            Be aware that there is a perf cost in calling this function.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement.GetFullPathForElement">
            <summary>
            Return an absolute path for the passed in element.
            If the element is already an absolute path, it is returned.
            Otherwise, it is unrelativized using the project directory
            as the base.
            Note that any ".." in the paths will be resolved.
            
            For non-file system based project, it may make sense to override.
            </summary>
            <returns>FullPath</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement.HasItemBeenDeleted">
            <summary>
            Has the item been deleted
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectFactory">
            <summary>
            Creates projects within the solution
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectFactory.BuildEngine">
            <summary>
            The msbuild engine that we are going to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectFactory.BuildProject">
            <summary>
            The msbuild project for the temporary project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <summary>
            Rather than directly creating the project, ask VS to initate the process of
            creating an aggregated project in case we are flavored. We will be called
            on the IVsAggregatableProjectFactory to do the real project creation.
            </summary>
            <param name="fileName">Project file</param>
            <param name="location">Path of the project</param>
            <param name="name">Project Name</param>
            <param name="flags">Creation flags</param>
            <param name="projectGuid">Guid of the project</param>
            <param name="project">Project that end up being created by this method</param>
            <param name="canceled">Was the project creation canceled</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectFactory.PreCreateForOuter(System.IntPtr)">
            <summary>
            Instantiate the project class, but do not proceed with the
            initialization just yet.
            Delegate to CreateProject implemented by the derived class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectFactory.ProjectTypeGuids(System.String)">
            <summary>
            Retrives the list of project guids from the project file.
            If you don't want your project to be flavorable, override
            to only return your project factory Guid:
                 return this.GetType().GUID.ToString("B");
            </summary>
            <param name="file">Project file to look into to find the Guid list</param>
            <returns>List of semi-colon separated GUIDs</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectFactory.ProjectInspector.IsLikeDev10MinusProject">
            we consider project to be Dev10- if it doesn't have any imports that belong to higher versions
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.MsBuildTarget">
            <summary>
            Defines the constant strings for various msbuild targets
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectFileConstants">
            <summary>
            Defines the constant strings used with project files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.DefaultSortOrderNode">
            <summary>
            A set of constants that specify the default sort order for different types of hierarchy nodes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode">
            <summary>
            Manages the CopyPaste and Drag and Drop scenarios for a Project.
            </summary>
            <remarks>This is a partial class.</remarks>
            <summary>
            Manages the persistent state of the project (References, options, files, etc.) and deals with user interaction via a GUI in the form a hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)">
            <summary>
            Called as soon as the mouse drags an item over a new hierarchy or hierarchy window
            </summary>
            <param name="pDataObject">reference to interface IDataObject of the item being dragged</param>
            <param name="grfKeyState">Current state of the keyboard and the mouse modifier keys. See docs for a list of possible values</param>
            <param name="itemid">Item identifier for the item currently being dragged</param>
            <param name="pdwEffect">On entry, a pointer to the current DropEffect. On return, must contain the new valid DropEffect</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.DragLeave">
            <summary>
            Called when one or more items are dragged out of the hierarchy or hierarchy window, or when the drag-and-drop operation is cancelled or completed.
            </summary>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)">
            <summary>
            Called when one or more items are dragged over the target hierarchy or hierarchy window. 
            </summary>
            <param name="grfKeyState">Current state of the keyboard keys and the mouse modifier buttons. See <seealso cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget"/></param>
            <param name="itemid">Item identifier of the drop data target over which the item is being dragged</param>
            <param name="pdwEffect"> On entry, reference to the value of the pdwEffect parameter of the IVsHierarchy object, identifying all effects that the hierarchy supports. 
            On return, the pdwEffect parameter must contain one of the effect flags that indicate the result of the drop operation. For a list of pwdEffects values, see <seealso cref="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)"/></param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)">
            <summary>
            Called when one or more items are dropped into the target hierarchy or hierarchy window when the mouse button is released.
            </summary>
            <param name="pDataObject">Reference to the IDataObject interface on the item being dragged. This data object contains the data being transferred in the drag-and-drop operation. 
            If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>
            <param name="grfKeyState">Current state of the keyboard and the mouse modifier keys. See <seealso cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget"/></param>
            <param name="itemid">Item identifier of the drop data target over which the item is being dragged</param>
            <param name="pdwEffect">Visual effects associated with the drag-and drop-operation, such as a cursor, bitmap, and so on. 
            The value of dwEffects passed to the source object via the OnDropNotify method is the value of pdwEffects returned by the Drop method</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)">
            <summary>
            Returns information about one or more of the items being dragged
            </summary>
            <param name="pdwOKEffects">Pointer to a DWORD value describing the effects displayed while the item is being dragged, 
            such as cursor icons that change during the drag-and-drop operation. 
            For example, if the item is dragged over an invalid target point 
            (such as the item's original location), the cursor icon changes to a circle with a line through it. 
            Similarly, if the item is dragged over a valid target point, the cursor icon changes to a file or folder.</param>
            <param name="ppDataObject">Pointer to the IDataObject interface on the item being dragged. 
            This data object contains the data being transferred in the drag-and-drop operation. 
            If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>
            <param name="ppDropSource">Pointer to the IDropSource interface of the item being dragged.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.OnDropNotify(System.Int32,System.UInt32)">
            <summary>
            Notifies clients that the dragged item was dropped. 
            </summary>
            <param name="fDropped">If true, then the dragged item was dropped on the target. If false, then the drop did not occur.</param>
            <param name="dwEffects">Visual effects associated with the drag-and-drop operation, such as cursors, bitmaps, and so on. 
            The value of dwEffects passed to the source object via OnDropNotify method is the value of pdwEffects returned by Drop method.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)">
            <summary>
            Allows the drag source to prompt to save unsaved items being dropped. 
            Notifies the source hierarchy that information dragged from it is about to be dropped on a target. 
            This method is called immediately after the mouse button is released on a drop. 
            </summary>
            <param name="o">Reference to the IDataObject interface on the item being dragged. 
            This data object contains the data being transferred in the drag-and-drop operation. 
            If the drop occurs, then this data object (item) is incorporated into the hierarchy window of the new hierarchy.</param>
            <param name="dwEffect">Current state of the keyboard and the mouse modifier keys.</param>
            <param name="fCancelDrop">If true, then the drop is cancelled by the source hierarchy. If false, then the drop can continue.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.OnPaste(System.Int32,System.UInt32)">
             <summary>
             Called after your cut/copied items has been pasted
             </summary>
            <param name="wasCut">If true, then the IDataObject has been successfully pasted into a target hierarchy. 
             If false, then the cut or copy operation was cancelled.</param>
             <param name="dropEffect">Visual effects associated with the drag and drop operation, such as cursors, bitmaps, and so on. 
             These should be the same visual effects used in OnDropNotify</param>
             <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.OnClear(System.Int32)">
            <summary>
            Called when your cut/copied operation is canceled
            </summary>
            <param name="wasCut">This flag informs the source that the Cut method was called (true), 
            rather than Copy (false), so the source knows whether to "un-cut-highlight" the items that were cut.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CanTargetNodeAcceptDrop(System.UInt32)">
            <summary>
            Determines if a node can accept drop opertaion.
            </summary>
            <param name="itemId">The id of the node.</param>
            <returns>true if the node acceots drag operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.PackageSelectionDataObject(System.Boolean)">
            <summary>
            Returns a dataobject from selected nodes
            </summary>
            <param name="cutHighlightItems">boolean that defines if the selected items must be cut</param>
            <returns>data object for selected items</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddFolderFromOtherProject(System.String,Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            This is used to recursively add a folder from an other project.
            Note that while we copy the folder content completely, we only
            add to the project items which are part of the source project.
            </summary>
            <param name="folderToAdd">Project reference (from data object) using the format: {Guid}|project|folderPath</param>
            <param name="targetNode">Node to add the new folder to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.WalkSourceProjectAndAdd(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode,System.Boolean)">
            <summary>
            Recursive method that walk a hierarchy and add items it find to our project.
            Note that this is meant as an helper to the Copy&amp;Paste/Drag&amp;Drop functionality.
            </summary>
            <param name="sourceHierarchy">Hierarchy to walk</param>
            <param name="itemId">Item ID where to start walking the hierarchy</param>
            <param name="targetNode">Node to start adding to</param>
            <param name="addSiblings">Typically false on first call and true after that</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddNodeIfTargetExistInStorage(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode,System.String,System.String)">
            <summary>
            Add an existing item (file/folder) to the project if it already exist in our storage.
            </summary>
            <param name="parentNode">Node to that this item to</param>
            <param name="name">Name of the item being added</param>
            <param name="targetPath">Path of the item being added</param>
            <returns>Node that was added</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CutToClipboard">
            <summary>
            Handle the Cut operation to the clipboard
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CopyToClipboard">
            <summary>
            Handle the Copy operation to the clipboard
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.PasteFromClipboard(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Handle the Paste operation to a targetNode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AllowPasteCommand">
            <summary>
            Determines if the paste command should be allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.RegisterClipboardNotifications(System.Boolean)">
            <summary>
            Register/Unregister for Clipboard events for the UiHierarchyWindow (solution explorer)
            </summary>
            <param name="register">true for register, false for unregister</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProcessSelectionDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Process dataobject from Drag/Drop/Cut/Copy/Paste operation
            </summary>
            <remarks>The targetNode is set if the method is called from a drop operation, otherwise it is null</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.QueryDropDataType(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
            <summary>
            Get the dropdatatype from the dataobject
            </summary>
            <param name="pDataObject">The dataobject to be analysed for its format</param>
            <returns>dropdatatype or none if dataobject does not contain known format</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.QueryDropEffect(Microsoft.VisualStudio.FSharp.ProjectSystem.DropDataType,System.UInt32)">
            <summary>
            Returns the drop effect.
            </summary>
            <remarks>
            // A directory based project should perform as follow:
                   NO MODIFIER 
                       - COPY if not from current hierarchy, 
                       - MOVE if from current hierarchy
                   SHIFT DRAG - MOVE
                   CTRL DRAG - COPY
                   CTRL-SHIFT DRAG - NO DROP (used for reference based projects only)
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CleanupSelectionDataObject(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             After a drop or paste, will use the dwEffects 
             to determine whether we need to clean up the source nodes or not. If
             justCleanup is set, it only does the cleanup work.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddFilesFromProjectReferences(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode,System.String[])">
            <summary>
            Moves files from one part of our project to another.
            </summary>
            <param name="targetNode">the targetHandler node</param>
            <param name="projectReferences">List of projectref string</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddFileToNodeFromProjectReference(System.String,Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Adds an item from a project refererence to target node.
            </summary>
            <param name="projectRef"></param>
            <param name="targetNode"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CleanAndFlushClipboard">
            <summary>
            Empties all the data structures added to the clipboard and flushes the clipboard.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.IdItemMapping">
            <summary>
            This class stores mapping from ids -> objects. Uses as a replacement of EventSinkCollection (ESC)
            Operations:
            - Add(HierarchyNode) -> adds object to mapping, returns id that will be assigned to the new object
            - SetAt(id, HierarchyNode) -> associates object with given id - required for rename operation, because new item should have the same id with the old one.
            Why ESC is not fit our needs: it internally stores items in arraylist (id corresponds to item index) and performs compaction during remove operation. 
            This means that if we remove last node with id X, then we cannot use SetAt operation 
            (because internal array list is already compacted and X is outside the valid range for indexes).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.EventTriggering">
            <summary>
            Flags for specifying which events to stop triggering.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.PerUserFileExtension">
            <summary>
            The user file extension.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.outputGroupNames">
            <summary>
            List of output groups names and their associated target
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.itemIdMap">
            <summary>Maps integer ids to project item instances</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.site">
            <summary>A service provider call back object provided by the IDE hosting the project manager</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.lastModifiedTime">
            <summary>
            This property returns the time of the last change made to this project.
            It is not the time of the last change on the project file, but actually of
            the in memory project settings.  In other words, it is the last time that 
            SetProjectDirty was called.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.buildEngine">
            <summary>
            MSBuild engine we are going to use 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.buildDependencyList">
            <summary>
            The build dependency list passed to IVsDependencyProvider::EnumDependencies 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.supportsProjectDesigner">
            <summary>
            Defines if Project System supports Project Designer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.disableScc">
            <summary>
            Field for determining whether sourcecontrol should be disabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.isRegisteredWithScc">
            <summary>
            Flag for controling how many times we register with the Scc manager.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.disableQueryEdit">
            <summary>
            Flag for controling query edit should communicate with the scc manager.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.canProjectDeleteItems">
            <summary>
            Control if command with potential destructive behavior such as delete should
            be enabled for nodes of this project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.outputBaseRelativePath">
            <summary>
            Member to store output base relative path. Used by OutputBaseRelativePath property
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.xmlFragments">
            <summary>
            Used for flavoring to hold the XML fragments
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.catidMapping">
            <summary>
            Used to map types to CATID. This provide a generic way for us to do this
            and make it simpler for a project to provide it's CATIDs for the different type of objects
            for which it wants to support extensibility. This also enables us to have multiple
            type mapping to the same CATID if we choose to.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.package">
            <summary>
            The public package implementation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProjectGuid">
            <summary>
            This Guid must match the Guid you registered under
            HKLM\Software\Microsoft\VisualStudio\%version%\Projects.
            Among other things, the Project framework uses this 
            guid to find your project and item templates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProjectType">
            <summary>
            Returns a caption for VSHPROPID_TypeName.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ImplicitlyExpandTargetFramework">
            <summary>
            True if project contains implicitly expanded lists of references.
            For example, portable libraries doesn't include the whole list of separate Reference items for the target profile.
            Instead MSBuild itself can resolve list of references for the target framework.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProjectIDGuid">
            <summary>
            This is the project instance guid that is peristed in the project file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CanUseTargetFSharpCoreReference">
            <summary>
            Denotes if FSharp.Core reference is relying on TargetFSharpCore property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.VisibleItems">
            <summary>
            Easy access to the collection of visible, user-defined project items
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ReEvaluateProjectFileTargetName">
            <summary>
            The target name that will be used for evaluating the project file (i.e., pseudo-builds).
            This target is used to trigger a build with when the project system changes. 
            Example: The language projrcts are triggering a build with the Compile target whenever 
            the project system changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProjectObject">
            <summary>
            This is the object that will be returned by EnvDTE.Project.Object for this project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.IsProjectFileDirty">
            <summary>
            Override this property to specify when the project file is dirty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SupportsProjectDesigner">
            <summary>
            True if the project uses the Project Designer Editor instead of the property page frame to edit project properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ShowProjectInSolutionPage">
            <summary>
            Defines the flag that supports the VSHPROPID.ShowProjInSolutionPage
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CanFileNodesHaveChilds">
            <summary>
            Gets or sets the ability of a project filenode to have child nodes (sub items).
            Example would be C#/VB forms having resx and designer files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Site">
            <summary>
            Gets a service provider object provided by the IDE hosting the project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ImageHandler">
            <summary>
            Gets an ImageHandler for the project node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.LastModifiedTime">
            <summary>
            This property returns the time of the last change made to this project.
            It is not the time of the last change on the project file, but actually of
            the in memory project settings.  In other words, it is the last time that 
            SetProjectDirty was called.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.IsNewProject">
            <summary>
            Determines whether this project is a new project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProjectFolder">
            <summary>
            Gets the path to the folder containing the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProjectFile">
            <summary>
            Gets or sets the project filename.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.BaseURI">
            <summary>
            Gets the Base Uniform Resource Identifier (URI).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.IsClosed">
            <summary>
            Gets whether or not the project is closed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.OutputBaseRelativePath">
            <summary>
            Gets or set the relative path to the folder containing the project ouput. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.DisableQueryEdit">
            <summary>
            Gets or sets the flag whether query edit should communicate with the scc manager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ItemIdMap">
            <summary>
            Gets a collection of integer ids that maps to project item instances
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Tracker">
            <summary>
            Get the helper object that track document changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.IsReadOnly">
            <summary>
            Gets whether or not the readonly file attribute is set for this project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.FileName">
            <summary>
            Gets the project file name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ConfigProvider">
            <summary>
            Gets the configuration provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.BuildActionConverter">
            <summary>
            Gets BuildActionConverter for this project, enumerating all build actions available
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.IsSccDisabled">
            <summary>
            Gets or sets whether or not source code control is disabled for this project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CanProjectDeleteItems">
            <summary>
            Gets or set whether items can be deleted for this project.
            Enabling this feature can have the potential destructive behavior such as deleting files from disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.HasProjectOpened">
            <summary>
            Determines whether the project was fully opened. This is set when the OnAfterOpenProject has triggered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.EventTriggeringFlag">
            <summary>
            Gets or sets event triggering flags.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.BuildProject">
            <summary>
            Defines the build project that has loaded the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.BuildEngine">
            <summary>
            Defines the build engine that is used to build the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Package">
            <summary>
            The public package implementation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetProperty(System.Int32,System.Object)">
            <summary>
            Sets the properties for the project node.
            </summary>
            <param name="propid">Identifier of the hierarchy property. For a list of propid values, <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID"/> </param>
            <param name="value">The value to set. </param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetEditLabel(System.String)">
            <summary>
            Renames the project node.
            </summary>
            <param name="label">The new name</param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetAutomationObject">
            <summary>
            Gets the automation object for the project node.
            </summary>
            <returns>An instance of an EnvDTE.Project implementation object representing the automation object for the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Close">
            <summary>
            Closes the project node.
            </summary>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Sets the service provider from which to access the services. 
            </summary>
            <param name="site">An instance to an Microsoft.VisualStudio.OLE.Interop object</param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetProperty(System.Int32)">
            <summary>
            Gets the properties of the project node. 
            </summary>
            <param name="propId">The __VSHPROPID of the property.</param>
            <returns>A property dependent value. See: <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID"/> for details.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetGuidProperty(System.Int32,System.Guid@)">
            <summary>
            Gets the GUID value of the node. 
            </summary>
            <param name="propid">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>
            <param name="guid">The guid to return for the property.</param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetGuidProperty(System.Int32,System.Guid@)">
            <summary>
            Sets Guid properties for the project node.
            </summary>
            <param name="propid">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>
            <param name="guid">The guid value to set.</param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Remove(System.Boolean,System.Boolean)">
            <summary>
            Removes items from the hierarchy. 
            </summary>
            <devdoc>Project overwrites this.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetMkDocument">
            <summary>
            Gets the moniker for the project node. That is the full path of the project file.
            </summary>
            <returns>The moniker for the project file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.FSharp.ProjectSystem.QueryStatusResult@)">
            <summary>
            Handles command status on the project node. If a command cannot be handled then the base should be called.
            </summary>
            <param name="cmdGroup">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>
            <param name="cmd">The command to query status for.</param>
            <param name="pCmdText">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>
            <param name="result">An out parameter specifying the QueryStatusResult of the command.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Handles command execution.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmd">The command to be executed.</param>
            <param name="nCmdexecopt">Values describe how the object should execute the command.</param>
            <param name="pvaIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="pvaOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
            <summary>
            Get the boolean value for the deletion of a project item
            </summary>
            <param name="deleteOperation">A flag that specifies the type of delete operation (delete from storage or remove from project)</param>
            <returns>true if item can be deleted from project</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetDocumentManager">
            <summary>
            Returns a specific Document manager to handle opening and closing of the Project(Application) Designer if projectdesigner is supported.
            </summary>
            <returns>Document manager object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.RunWizard(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode,System.String,System.String,System.IntPtr)">
            <summary>
            Executes a wizard.
            </summary>
            <param name="parentNode">The node to which the wizard should add item(s).</param>
            <param name="itemName">The name of the file that the user typed in.</param>
            <param name="wizardToRun">The name of the wizard to run.</param>
            <param name="dlgOwner">The owner of the dialog box.</param>
            <returns>A VSADDRESULT enum value describing success or failure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddProjectReference">
            <summary>
            Override this method if you want to modify the behavior of the Add Reference dialog
            By example you could change which pages are visible and which is visible by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetCompiler">
            <summary>
            Returns the Compiler associated to the project 
            </summary>
            <returns>Null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CreateProjectOptions(Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName)">
            <summary>
            Override this method if you have your own project specific
            subclass of ProjectOptions
            </summary>
            <returns>This method returns a new instance of the ProjectOptions base class.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Load(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Int32@)">
            <summary>
            Loads a project file. Called from the factory CreateProject to load the project.
            </summary>
            <param name="fileName">File name of the project that will be created. </param>
            <param name="location">Location where the project will be created.</param>
            <param name="name">If applicable, the name of the template to use when cloning a new project.</param>
            <param name="flags">Set of flag values taken from the VSCREATEPROJFLAGS enumeration.</param>
            <param name="iidProject">Identifier of the interface that the caller wants returned. </param>
            <param name="canceled">An out parameter specifying if the project creation was canceled</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddFileFromTemplate(System.String,System.String)">
            <summary>
            Called to add a file to the project from a template.
            Override to do it yourself if you want to customize the file
            </summary>
            <param name="source">Full path of template file</param>
            <param name="target">Full path of file once added to the project</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.OnOpenItem(System.String)">
            <summary>
            Called when the project opens an editor window for the given file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.PrepareBuild(Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName,System.Boolean)">
            <summary>
            This is called from the main thread before the background build starts.
             cleanBuild is not part of the vsopts, but passed down as the callpath is differently
             PrepareBuild mainly creates directories and cleans house if cleanBuild is true
            </summary>
            <param name="config"></param>
            <param name="cleanBuild"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Build(Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Do the build by invoking msbuild
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetProjectProperty(System.String,System.Boolean)">
            <summary>
            Return the value of a project property
            </summary>
            <param name="propertyName">Name of the property to get</param>
            <param name="resetCache">True to avoid using the cache</param>
            <returns>null if property does not exist, otherwise value of the property</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetUnevaluatedProjectProperty(System.String,System.Boolean)">
            <summary>
            Return the value of a project property, unevaluated
            </summary>
            <param name="propertyName">Name of the property to get</param>
            <param name="resetCache">True to avoid using the cache</param>
            <returns>null if property does not exist, otherwise value of the property</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetProjectProperty(System.String,System.String)">
            <summary>
            Set value of project property
            </summary>
            <param name="propertyName">Name of property</param>
            <param name="propertyValue">Value of property</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetOrCreateBuildEventProperty(System.String,System.String)">
            <summary>
            Utility routine to set or create build event properties.  Both must be 
            created at the end of the project file.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ParsePropertyValueToInt64(System.String)">
            <remarks>Support hex format (like 0xFF)</remarks>
            <exception cref="T:System.Exception">
            Raise if invalid format
            The inner exception contains the real exception, of type FormatException, StackOverflowException
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetAssemblyName(Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName)">
            <summary>
            Get the assembly name for a give configuration
            </summary>
            <param name="config">the matching configuration in the msbuild file</param>
            <returns>assembly name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CreateFileNode(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement,System.Nullable{System.UInt32})">
            <summary>
            Create a file node based on an msbuild item.
            </summary>
            <param name="item">msbuild item</param>
            <returns>FileNode added</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CreateFileNode(System.String,System.Nullable{System.UInt32})">
            <summary>
            Create a file node based on a string.
            </summary>
            <param name="file">filename of the new filenode</param>
            <returns>File node added</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.NormalizePath(System.String)">
            <summary>
            Return an absolute path that is normalized (e.g. no ".." portions)
            </summary>
            <param name="includePath">Original path.  Can be relative (in which case relative to ProjectFolder) or absolute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CreateFolderNodes(System.String)">
            <summary>
            Walks the subpaths of a project relative path and checks if the folder nodes hierarchy is already there, if not creates it.
            </summary>
            <param name="path">Path of the folder, can be relative to project or absolute</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.NodeHasDesigner(System.String)">
            <summary>
            Defines if Node has Designer. By default we do not support designers for nodes
            </summary>
            <param name="itemPath">Path to item to query for designer support</param>
            <returns>true if node has designer</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetConfigurationIndependentPropertyPages">
            <summary>
            List of Guids of the config independent property pages. It is called by the GetProperty for VSHPROPID_PropertyPagesCLSIDList property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetConfigurationDependentPropertyPages">
            <summary>
            Returns a list of Guids of the configuration dependent property pages. It is called by the GetProperty for VSHPROPID_CfgPropertyPagesCLSIDList property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetPriorityProjectDesignerPages">
            <summary>
            An ordered list of guids of the prefered property pages. See <see cref="!:__VSHPROPID.VSHPROPID_PriorityPropertyPagesCLSIDList"/>
            </summary>
            <returns>An array of guids.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.VerifySubFolderExists(System.String,Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Takes a path and verifies that we have a node with that name.
            It is meant to be a helper method for CreateFolderNodes().
            For some scenario it may be useful to override.
            </summary>
            <param name="path">full path to the subfolder we want to verify.</param>
            <param name="parent">the parent node where to add the subfolder if it does not exist.</param>
            <returns>the foldernode correcsponding to the path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CreateFolderNode(System.String,Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement)">
            <summary>
            To support virtual folders, override this method to return your own folder nodes
            </summary>
            <param name="path">Path to store for this folder</param>
            <param name="element">Element corresponding to the folder</param>
            <returns>A FolderNode that can then be added to the hierarchy</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetSelectedNodes">
            <summary>
            Gets the list of selected HierarchyNode objects
            </summary>
            <returns>A list of HierarchyNode objects</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.UpdateSccStateIcons">
            <summary>
            Recursevily walks the hierarchy nodes and redraws the state icons
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ShowAllFiles">
            <summary>
            Handles the shows all objects command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddWebReference">
            <summary>
            Handles the Add web reference command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.UnloadProject">
            <summary>
            Unloads the project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CleanProject">
            <summary>
            Handles the clean project command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Reload">
            <summary>
            Reload project from project file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.RenameProjectFile(System.String)">
            <summary>
            Renames the project file
            </summary>
            <param name="newFile">The full path of the new project file.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.FilterItemTypeToBeAddedToHierarchy(System.String)">
            <summary>
            Filter items that should not be processed as file items. Example: Folders and References.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetOutputLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Associate window output pane to the build logger
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetBuildConfigurationProperties(Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName)">
            <summary>
            Set configuration properties for a specific configuration
            </summary>
            <param name="config">configuration name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.InvokeMsBuild(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            This execute an MSBuild target.
            If you depend on the items/properties generated by the target
            you should be aware that any call to BuildTarget on any project
            will reset the list of generated items/properties
            </summary>
            <param name="target">Name of the MSBuild target to execute</param>
            <returns>Result from executing the target (success/failure)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.DoMSBuildSubmission(Microsoft.VisualStudio.FSharp.ProjectSystem.BuildKind,System.String,Microsoft.Build.Execution.ProjectInstance@,Microsoft.VisualStudio.FSharp.ProjectSystem.MSBuildCoda,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Start MSBuild build submission
            </summary>
            If buildKind is ASYNC, this method starts the submission ane returns. uiThreadCallback will be called on UI thread once submissions completes.
            if buildKind is SYNC, this method executes the submission and runs uiThreadCallback
            <param name="buildKind">Is it a SYNC or ASYNC build</param>
            <param name="target">target to build</param>
            <param name="projectInstance">project instance to build; if null, this.BuildProject.CreateProjectInstance() is used to populate</param>
            <param name="uiThreadCallback">callback to be run UI thread </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.InitializeProjectProperties">
            <summary>
            Initialize common project properties with default value if they are empty
            </summary>
            <remarks>The following common project properties are defaulted to projectName (if empty):
               AssemblyName, Name and RootNamespace.
            If the project filename is not set then no properties are set</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CreateConfigProvider">
            <summary>
            Factory method for configuration provider
            </summary>
            <returns>Configuration provider created</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CreateReferenceContainerNode">
            <summary>
            Factory method for reference container node
            </summary>
            <returns>ReferenceContainerNode created</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the project file on a new name.
            </summary>
            <param name="newFileName">The new name of the project file.</param>
            <param name="saveCopyAs">if <c>true</c> - then SaveAs operation is performed on the copy of of current project file</param>
            <returns>Success value or an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SaveMSBuildProjectFileAs(System.String)">
            <summary>
            Saves project file related information to the new file name. It also calls msbuild API to save the project file.
            It is called by the SaveAs method and the SetEditLabel before the project file rename related events are triggered. 
            An implementer can override this method to provide specialized semantics on how the project file is renamed in the msbuild file.
            </summary>
            <param name="newFileName">The new full path of the project file</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddFileToMsBuild(System.String)">
            <summary>
            Adds a file to the msbuild project.
            </summary>
            <param name="file">The file to be added.</param>
            <returns>A Projectelement describing the newly added file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddFolderToMsBuild(System.String)">
            <summary>
            Adds a folder to the msbuild project.
            </summary>
            <param name="folder">The folder to be added.</param>
            <returns>A Projectelement describing the newly added folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CanOverwriteExistingItem(System.String,System.String)">
            <summary>
            Determines whether an item can be owerwritten in the hierarchy.
            </summary>
            <param name="originalFileName">The orginal filname.</param>
            <param name="computedNewFileName">The computed new file name, that will be copied to the project directory or into the folder .</param>
            <returns>S_OK for success, or an error message</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.OverwriteExistingItem(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Handle owerwriting of an existing item in the hierarchy.
            </summary>
            <param name="existingNode">The node that exists.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddNewFileNodeToHierarchy(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode,System.String)">
            <summary>
            Adds a new file node to the hierarchy.
            </summary>
            <param name="parentNode">The parent of the new fileNode</param>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.IsCurrentStateASuppressCommandsMode">
            <summary>
            Defines whther the current mode of the project is in a supress command mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetOutputGroupNames">
            <summary>
            This is the list of output groups that the configuration object should
            provide.
            The first string is the name of the group.
            The second string is the target name (MSBuild) for that group.
            
            To add/remove OutputGroups, simply override this method and edit the list.
            
            To get nice display names and description for your groups, override:
                   - GetOutputGroupDisplayName
                   - GetOutputGroupDescription
            </summary>
            <returns>List of output group name and corresponding MSBuild target</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetOutputGroupDisplayName(System.String)">
            <summary>
            Get the display name of the given output group.
            </summary>
            <param name="canonicalName">Canonical name of the output group</param>
            <returns>Display name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetOutputGroupDescription(System.String)">
            <summary>
            Get the description of the given output group.
            </summary>
            <param name="canonicalName">Canonical name of the output group</param>
            <returns>Description</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetCurrentConfiguration">
            <summary>
            Set the configuration in MSBuild.
            This does not get persisted and is used to evaluate msbuild conditions
            which are based on the $(Configuration) property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetConfiguration(Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName)">
            <summary>
            Set the configuration property in MSBuild.
            This does not get persisted and is used to evaluate msbuild conditions
            which are based on the $(Configuration) property.
            </summary>
            <param name="configCanonicalName">Configuration name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProcessReferences">
            <summary>
            Loads reference items from the project file into the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProcessCustomBuildActions">
            <summary>
            Loads build actions for a project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProcessFilesAndFolders">
            <summary>
            Loads file items from the project file into the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.LoadNonBuildInformation">
            <summary>
            For flavored projects which implement IPersistXMLFragment, load the information now
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CompareNodes(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode,Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Used to sort nodes in the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.OnHandleConfigurationRelatedGlobalProperties(System.Object,Microsoft.VisualStudio.FSharp.ProjectSystem.ActiveConfigurationChangedEventArgs)">
            <summary>
            Handles global properties related to configuration and platform changes invoked by a change in the active configuration.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="eventArgs">The event args</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Build(System.String)">
            <summary>
            Overloaded method. Invokes MSBuild using the default configuration and does without logging on the output window pane.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.BuildWithExtraProperties(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Overloaded method. Invokes MSBuild using the default configuration and does without logging on the output window pane.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.BuildToOutput(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Overloaded method. Invokes MSBuild using the default configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetProjectProperty(System.String)">
            <summary>
            Get value of Project property
            </summary>
            <param name="propertyName">Name of Property to retrieve</param>
            <returns>Value of property</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetProjectFileDirty(System.Boolean)">
            <summary>
            Set dirty state of project
            </summary>
            <param name="value">boolean value indicating dirty state</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetOutputAssembly(Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName)">
            <summary>
            Get output assembly for a specific configuration name
            </summary>
            <param name="configCanonicalName">Name of configuration</param>
            <returns>Name of output assembly</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.NodeFromItemId(System.UInt32)">
            <summary>
            Get Node from ItemID.
            </summary>
            <param name="itemId">ItemID for the requested node</param>
            <returns>Node if found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CreateMsBuildFileItem(System.String,System.String)">
            <summary>
            This method return new project element, and add new MSBuild item to the project/build hierarchy
            </summary>
            <param name="file">file name</param>
            <param name="itemType">MSBuild item type</param>
            <returns>new project element</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetProjectElement(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            This method returns new project element based on existing MSBuild item. It does not modify/add project/build hierarchy at all.
            </summary>
            <param name="item">MSBuild item instance</param>
            <returns>wrapping project element</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CreateFolderNode(System.String)">
            <summary>
            Create FolderNode from Path
            </summary>
            <param name="path">Path to folder</param>
            <returns>FolderNode created that can be added to the hierarchy</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.QueryEditProjectFile(System.Boolean)">
            <summary>
            Verify if the file can be written to.
            Return false if the file is read only and/or not checked out
            and the user did not give permission to change it.
            Note that exact behavior can also be affected based on the SCC
            settings under Tools->Options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetBaseDirectoryForAddingFiles(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Given a node determines what is the directory that can accept files.
            If the node is a FoldeNode than it is the Url of the Folder.
            If the node is a ProjectNode it is the project folder.
            Otherwise (such as FileNode subitem) it delegate the resolution to the parent node.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ClonePropertyGroup(Microsoft.Build.Construction.ProjectPropertyGroupElement)">
            <summary>
            For public use only.
            This creates a copy of an existing configuration and add it to the project.
            Caller should change the condition on the PropertyGroup.
            If derived class want to accomplish this, they should call ConfigProvider.AddCfgsOfCfgName()
            It is expected that in the future MSBuild will have support for this so we don't have to
            do it manually.
            </summary>
            <param name="group">PropertyGroup to clone</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.RegisterSccProject">
            <summary>
            Register the project with the Scc manager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.UnRegisterProject">
            <summary>
             Unregisters us from the SCC manager
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetCATIDForType(System.Type)">
            <summary>
            Get the CATID corresponding to the specified type.
            </summary>
            <param name="type">Type of the object for which you want the CATID</param>
            <returns>CATID</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddCATIDMapping(System.Type,System.Guid)">
            <summary>
            This is used to specify a CATID corresponding to a BrowseObject or an ExtObject.
            The CATID can be any GUID you choose. For types which are your owns, you could use
            their type GUID, while for other types (such as those provided in the MPF) you should
            provide a different GUID.
            </summary>
            <param name="type">Type of the extensible object</param>
            <param name="catid">GUID that extender can use to uniquely identify your object type</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.LoadXmlFragment(Microsoft.VisualStudio.Shell.Interop.IPersistXMLFragment,System.String)">
            <summary>
            Initialize an object with an XML fragment.
            </summary>
            <param name="persistXmlFragment">Object that support being initialized with an XML fragment</param>
            <param name="configName">Name of the configuration being initialized, null if it is the project</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.PersistXMLFragments">
            <summary>
            Retrieve all XML fragments that need to be saved from the flavors and store the information in msbuild.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetMkDocument(System.UInt32,System.String@)">
            <summary>
            Callback from the additem dialog. Deals with adding new and existing items
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])">
            <summary>
            Creates new items in a project, adds existing files to a project, or causes Add Item wizards to be run
            </summary>
            <param name="itemIdLoc"></param>
            <param name="op"></param>
            <param name="itemName"></param>
            <param name="filesToOpen"></param>
            <param name="files">Array of file names. 
            If dwAddItemOperation is VSADDITEMOP_CLONEFILE the first item in the array is the name of the file to clone. 
            If dwAddItemOperation is VSADDITEMOP_OPENDIRECTORY, the first item in the array is the directory to open. 
            If dwAddItemOperation is VSADDITEMOP_RUNWIZARD, the first item is the name of the wizard to run, 
            and the second item is the file name the user supplied (same as itemName).</param>
            <param name="dlgOwner"></param>
            <param name="editorFlags"></param>
            <param name="editorType"></param>
            <param name="physicalView"></param>
            <param name="logicalView"></param>
            <param name="result"></param>
            <returns>S_OK if it succeeds </returns>
            <remarks>The result array is initalized to failure.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GenerateCopyOfFileName(System.String,System.String)">
            <summary>
            Generates Copy Of ... name for a given fileName. <c>baseDir</c> will be containing folder for the result file.
            Candidates will look like:
            - Copy of fileName
            - Copy (2) of fileName etc
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)">
            <summary>
            for now used by add folder. Called on the ROOT, as only the project should need
            to implement this.
            for folders, called with parent folder, blank extension and blank suggested root
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Implements IVsProject3::TransferItem
            This function is called when an open miscellaneous file is being transferred
            to our project. The sequence is for the shell to call AddItemWithSpecific and
            then use TransferItem to transfer the open document to our project.
            </summary>
            <param name="oldMkDoc">Old document name</param>
            <param name="newMkDoc">New document name</param>
            <param name="frame">Optional frame if the document is open</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetBuildSystemKind(System.UInt32@)">
            <summary>
            Used to determine the kind of build system; BSK_MSBUILD_VS10 maps to 
            MSBuild 4.0
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])">
            <summary>
            Add Components to the Project.
            Used by the environment to add components specified by the user in the Component Selector dialog 
            to the specified project
            </summary>
            <param name="dwAddCompOperation">The component operation to be performed.</param>
            <param name="cComponents">Number of components to be added</param>
            <param name="rgpcsdComponents">array of component selector data</param>
            <param name="hwndDialog">Handle to the component picker dialog</param>
            <param name="pResult">Result to be returned to the caller</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
            <summary>
            This method is called to determine which files should be placed under source control for a given VSITEMID within this hierarchy.
            </summary>
            <param name="itemid">Identifier for the VSITEMID being queried.</param>
            <param name="stringsOut">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>
            <param name="flagsOut">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
            <summary>
            This method is called to discover special (hidden files) associated with a given VSITEMID within this hierarchy. 
            </summary>
            <param name="itemid">Identifier for the VSITEMID being queried.</param>
            <param name="sccFile">One of the files associated with the node</param>
            <param name="stringsOut">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>
            <param name="flagsOut">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
            <remarks>This method is called to discover any special or hidden files associated with an item in the project hierarchy. It is called when GetSccFiles returns with the SFF_HasSpecialFiles flag set for any of the files associated with the node.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])">
            <summary>
            This method is called by the source control portion of the environment to inform the project of changes to the source control glyph on various nodes. 
            </summary>
            <param name="affectedNodes">Count of changed nodes.</param>
            <param name="itemidAffectedNodes">An array of VSITEMID identifiers of the changed nodes.</param>
            <param name="newGlyphs">An array of VsStateIcon glyphs representing the new state of the corresponding item in rgitemidAffectedNodes.</param>
            <param name="newSccStatus">An array of status flags from SccStatus corresponding to rgitemidAffectedNodes. </param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetSccLocation(System.String,System.String,System.String,System.String)">
            <summary>
            This method is called by the source control portion of the environment when a project is initially added to source control, or to change some of the project's settings.
            </summary>
            <param name="sccProjectName">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>
            <param name="sccLocalPath">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>
            <param name="sccAuxPath">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>
            <param name="sccProvider">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)">
            <summary>
            Allows you to query the project for special files and optionally create them. 
            </summary>
            <param name="fileId">__PSFFILEID of the file</param>
            <param name="flags">__PSFFLAGS flags for the file</param>
            <param name="itemid">The itemid of the node in the hierarchy</param>
            <param name="fileName">The file name of the special file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetInner">
            <summary>
            Get the inner object of an aggregated hierarchy
            </summary>
            <returns>A HierarchyNode</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetReferenceContainer">
            <summary>
            Returns the reference container node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.ProjectEventsProvider">
            <summary>
            Defines the provider for the project events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetAggregateProjectTypeGuids(System.String@)">
            <summary>
            Retrieve the list of project GUIDs that are aggregated together to make this project.
            </summary>
            <param name="projectTypeGuids">Semi colon separated list of Guids. Typically, the last GUID would be the GUID of the base project factory</param>
            <returns>HResult</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <summary>
            This is where the initialization occurs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.OnAggregationComplete">
            <summary>
            This is called after the project is done initializing the different layer of the aggregations
            </summary>
            <returns>HResult</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetAggregateProjectTypeGuids(System.String)">
            <summary>
            Set the list of GUIDs that are aggregated together to create this project.
            </summary>
            <param name="projectTypeGuids">Semi-colon separated list of GUIDs, the last one is usually the project factory of the base project factory</param>
            <returns>HResult</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetInnerProject(System.Object)">
            <summary>
            We are always the inner most part of the aggregation
            and as such we don't support setting an inner project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetItemAttribute(System.UInt32,System.String,System.String@)">
            <summary>
            Get the property of an item
            </summary>
            <param name="item">ItemID</param>
            <param name="attributeName">Name of the property</param>
            <param name="attributeValue">Value of the property (out parameter)</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetPropertyValue(System.String,System.String,System.UInt32,System.String@)">
            <summary>
            Get the value of the property in the project file
            </summary>
            <param name="propertyName">Name of the property to remove</param>
            <param name="configName">Configuration for which to remove the property</param>
            <param name="storage">Project or user file (_PersistStorageType)</param>
            <param name="propertyValue">Value of the property (out parameter)</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#RemoveProperty(System.String,System.String,System.UInt32)">
            <summary>
            Delete a property
            In our case this simply mean defining it as null
            </summary>
            <param name="propertyName">Name of the property to remove</param>
            <param name="configName">Configuration for which to remove the property</param>
            <param name="storage">Project or user file (_PersistStorageType)</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetItemAttribute(System.UInt32,System.String,System.String)">
            <summary>
            Set a property on an item
            </summary>
            <param name="item">ItemID</param>
            <param name="attributeName">Name of the property</param>
            <param name="attributeValue">New value for the property</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetPropertyValue(System.String,System.String,System.UInt32,System.String)">
            <summary>
            Set a project property
            </summary>
            <param name="propertyName">Name of the property to set</param>
            <param name="configName">Configuration for which to set the property</param>
            <param name="storage">Project file or user file (_PersistStorageType)</param>
            <param name="propertyValue">New value for that property</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.Initialize">
            <summary>
            Initialize projectNode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddIndependentFileNode(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Add an item to the hierarchy based on the item path
            </summary>
            <param name="item">Item to add</param>
            <returns>Added node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.AddFileNodeToNode(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Add a file node to the hierarchy
            </summary>
            <param name="item">msbuild item to add</param>
            <param name="parentNode">Parent Node</param>
            <returns>Added node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetItemParentNode(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Get the parent node of an msbuild item
            </summary>
            <param name="item">msbuild item</param>
            <returns>parent node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetSccSettings(System.String,System.String,System.String,System.String)">
            <summary>
            Updates our scc project settings. 
            </summary>
            <param name="sccProjectName">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>
            <param name="sccLocalPath">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>
            <param name="sccAuxPath">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>
            <param name="sccProvider">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>
            <returns>Returns true if something changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.InitSccInfo">
            <summary>
            Sets the scc info from the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.SetProjectGuidFromProjectFile(System.Boolean)">
            <summary>
            Sets the project guid from the project file. If no guid is found in the file, 
            and we're loading for the first time, a new guid is created and assigned for the instance project guid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CloseAllNodes(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Recusively parses the tree and closes all nodes, including "node".
            </summary>
            <param name="node">The subtree to close.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.CloseAllSubNodes(Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNode)">
            <summary>
            Recusively parses the tree and closes all nodes below "node", but don't close "node".
            </summary>
            <param name="node">The subtree to close.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.EnsureMSBuildAndSolutionExplorerAreInSync">
            <summary>
            Debug method to assert that the project file and the solution explorer are in sync.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetProjectExtensions">
            <summary>
            Get the project extensions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode.GetOuterAs``1">
            <summary>
            Get the outer T implementation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectOptions.CodePage">
            <devdoc>must be an int if not null</devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectOptions.UserLocaleId">
            <devdoc>must be an int if not null.</devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectPackage">
            <summary>
            Defines abstract package.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectPackage.solutionListeners">
            <summary>
            This is the place to register all the solution listeners.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectPackage.SolutionListeners">
            <summary>
            Add your listener to this list. They should be added in the overridden Initialize befaore calling the base.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.projectRefError">
            <summary>
            Containes either null if project reference is OK or instance of Task with error message if project reference is invalid
            i.e. project A references project B when target framework version for B is higher that for A
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.referencedProjectGuid">
            <summary>
            The name of the assembly this refernce represents
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.referencedProject">
            <summary>
            This is a reference to the automation object for the referenced project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.canRemoveReference">
            <summary>
            This state is controlled by the solution events.
            The state is set to false by OnBeforeUnloadProject.
            The state is set to true by OnBeforeCloseProject event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.isNodeValid">
            <summary>
            Possibility for solution listener to update the state on the dangling reference.
            It will be set in OnBeforeUnloadProject then the nopde is invalidated then it is reset to false.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.IsNodeValid">
            <summary>
            Possiblity to shortcut and set the dangling project reference icon.
            It is ussually manipulated by solution listsneres who handle reference updates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.CanRemoveReference">
            <summary>
            Controls the state whether this reference can be removed or not. Think of the project unload scenario where the project reference should not be deleted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.ReferencedProject">
            <summary>
            Gets the automation object for the referenced project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.CleanProjectReferenceErrorState">
            <summary>
            Resets error (if any) associated with current project reference
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.SetError(System.String)">
            <summary>
            Creates new error with given text and associates it with current project reference.
            Old error is removed
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.SetProjectReferencesHigherVersionWarningMessage">
            <summary>
            Helper method: creates and set message with ID SR.ProjectReferencesHigherVersionWarning
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.RefreshProjectReferenceErrorState">
            <summary>
            Actualizes error associated with this project reference 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.ReferencedProjectOutputPath">
            <summary>
            Gets the full path to the assembly generated by this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement)">
            <summary>
            Constructor for the ReferenceNode. It is called when the project is reloaded, when the project element representing the refernce exists. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.AddReference">
            <summary>
            The node is added to the hierarchy and then updates the build dependency list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.Remove(System.Boolean,System.Boolean)">
            <summary>
            Overridden method. The method updates the build dependency list before removing the node from the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.BindReferenceData">
            <summary>
            Links a reference node to the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.CanShowDefaultIcon">
            <summary>
            Defines whether this node is valid node for painting the refererence icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.CheckIfCanAddReference">
            <summary>
            Checks if a project reference can be added to the hierarchy. It calls base to see if the reference is not already there, then checks for circular references.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.CheckFrameworksCompatibility(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,System.Guid)">
            <summary>
            Checks the compatibility of target frameworks for given projects
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.GetProjectTargetFrameworkName(System.IServiceProvider,System.Guid)">
            <summary>
            Returns target framework for the given project Guid
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectReferenceNode.GetProjectTargetFrameworkName(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode)">
            <summary>
            Returns target framework for the given project node
            </summary>
            <param name="projectNode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.PropertiesEditorLauncher">
            <summary>
            This class is used to enable launching the project properties
            editor from the Properties Browser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.PropertiesEditorLauncher.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Launch the Project Properties Editor (properties pages)
            </summary>
            <returns>If we succeeded or not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.GetAutomationObject">
            <summary>
            Returns an instance of the automation object for ReferenceContainerNode
            </summary>
            <returns>An intance of the Automation.OAReferenceFolderItem type if succeeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.GetEditLabel">
            <summary>
            Disable inline editing of Caption of a ReferendeContainerNode
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.PrepareSelectedNodesForClipBoard">
            <summary>
            References node cannot be dragged.
            </summary>
            <returns>A stringbuilder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.ExcludeFromProject">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.CanShowDefaultIcon">
            <summary>
            Defines whether this node is valid node for painting the refererences icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.LoadReferencesFromBuildProject(Microsoft.Build.Evaluation.Project)">
            <summary>
            Adds references to this container from a MSBuild project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
            <summary>
            Adds a reference to this container using the selector data structure to identify it.
            </summary>
            <param name="selectorData">data describing selected component</param>
            <returns>Reference in case of a valid reference node has been created or already existed. Otherwise null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement)">
            <summary>
            Creates a project reference node given an existing project element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
            <summary>
            Create a Project to Project reference given a VSCOMPONENTSELECTORDATA structure
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,Microsoft.VisualStudio.FSharp.ProjectSystem.AddReferenceDialogTab)">
            <summary>
            Creates an assemby or com reference node given a selector data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.CreateAssemblyReferenceNode(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement,Microsoft.VisualStudio.FSharp.ProjectSystem.BuildResult)">
            <summary>
            Creates an assembly refernce node from a project element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.CreateAssemblyReferenceNode(System.String,Microsoft.VisualStudio.FSharp.ProjectSystem.AddReferenceDialogTab,System.Boolean)">
            <summary>
            Creates an assembly reference node from a file path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectElement)">
            <summary>
            Creates a com reference node from the project element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.CreateComReferenceNode(System.String)">
            <summary>
            Creates a com reference node from the string that represents the path to a file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
            <summary>
            Creates a com reference node from a selector data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.GetAutomationObject">
            <summary>
            Get an instance of the automation object for ReferenceNode
            </summary>
            <returns>An instance of Automation.OAReferenceItem type if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.GetEditLabel">
            <summary>
            Disable inline editing of Caption of a ReferendeNode
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.GetMkDocument">
            <summary>
            This method is called by the interface method GetMkDocument to specify the item moniker.
            </summary>
            <returns>The moniker for this item</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.ExcludeFromProject">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.PrepareSelectedNodesForClipBoard">
            <summary>
            References node cannot be dragged.
            </summary>
            <returns>A stringbuilder.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.SimpleName">
            <summary>
            If this is a managed assembly that has been resolved, its simple name.  Else if this is project reference, the filename (sans path/extension).  Else string.Empty.
            This is only used in the "IsAlreadyAdded" logic to prevent adding two references to same-named assemblies via the VS UI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.AddReference">
            <summary>
            Links a reference node to the project and hierarchy.  Returns true if succeeds, false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.RefreshReference(Microsoft.VisualStudio.FSharp.ProjectSystem.BuildResult)">
            <summary>
            Refreshes a reference by re-resolving it and redrawing the icon.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.ResolveReference(Microsoft.VisualStudio.FSharp.ProjectSystem.BuildResult)">
            <summary>
            Resolves references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.CheckIfCanAddReference">
            <summary>
            Validates that a reference can be added.
            </summary>
            <returns>Success if the reference can be added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode@)">
            <summary>
            Checks if a reference is already added. The method parses all references and compares the Url.
            </summary>
            <returns>true if the assembly has already been added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.GetBrowseLibraryGuid">
            <summary>
            Gets the Guid to use to set VSOJBECTINFO.pguidLib for the call to IVsObjBrowser.NavigateTo
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ReferenceNode.ShowObjectBrowser">
            <summary>
            Shows the Object Browser
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.SelectionListener.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.SelectionListener.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListener.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListener.OnQueryChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
            <summary>
            Fired before a project is moved from one parent to another in the solution explorer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListener.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListenerForProjectEvents">
            <summary>
            This class triggers the project events for "our" hierrachies.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListenerForProjectEvents.AfterProjectFileOpened">
            <summary>
            Event raised just after the project file opened.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListenerForProjectEvents.BeforeProjectFileClosed">
            <summary>
            Event raised before the project file closed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListenerForProjectEvents.RaiseAfterProjectFileOpened(System.Boolean)">
            <summary>
            Raises after project file opened event.
            </summary>
            <param name="added">True if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListenerForProjectEvents.RaiseBeforeProjectFileClosed(System.Boolean)">
            <summary>
            Raises the before  project file closed event.
            </summary>
            <param name="removed">true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListenerForProjectReferenceUpdate.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
            <summary>
            Notifies listening clients that the project has been opened. 
            This method is called when on opening solution and when project is reloaded.
            If project was modified before opening (i.e. target framework moniker was changed) then it can:
              1) have bad references - new version of target framework is lower than version of target framework in one of project references
              2) be the cause of bad references - current project A was referenced by project B and new version of target framework in A is higher than in B
            To deal with this situation we renew state of error in:
              - project references of current project (solve 1)
              - project references of all project that point to current project (solve 2)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListenerForProjectReferenceUpdate.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
            <summary>
            Delete this project from the references of projects of this type, if it is found.
            </summary>
            <param name="hierarchy"></param>
            <param name="removed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionListenerForProjectReferenceUpdate.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Needs to update the dangling reference on projects that contain this hierarchy as project reference.
            </summary>
            <param name="stubHierarchy"></param>
            <param name="realHierarchy"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputType">
            <summary>
            Defines possible types of output that can produced by a language project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputType.WinExe">
            <summary>
            The output type is a windows executable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputType.Exe">
            <summary>
            The output type is an executable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.OutputType.Library">
            <summary>
            The output type is a class library.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.DebugMode">
            <summary>
            Debug values used by DebugModeConverter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.PlatformType">
            <summary>
            Defines the version of the CLR that is appropriate to the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.PropPageStatus">
            <summary>
            Defines the currect state of a property page.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.QueryStatusResult">
            <summary>
            Defines the status of the command being queried
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.QueryStatusResult.NOTSUPPORTED">
            <summary>
            The command is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.QueryStatusResult.SUPPORTED">
            <summary>
            The command is supported
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.QueryStatusResult.ENABLED">
            <summary>
            The command is enabled
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.QueryStatusResult.LATCHED">
            <summary>
            The command is toggled on
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.QueryStatusResult.NINCHED">
            <summary>
            The command is toggled off (the opposite of LATCHED).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.QueryStatusResult.INVISIBLE">
            <summary>
            The command is invisible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyAddType">
            <summary>
            Defines the type of item to be added to the hierarchy.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.CommandOrigin">
            <summary>
            Defines the component from which a command was issued.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.MSBuildResult">
            <summary>
            Defines the current status of the build process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.MSBuildResult.Suspended">
            <summary>
            The build is currently suspended.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.MSBuildResult.Resumed">
            <summary>
            The build has been restarted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.MSBuildResult.Failed">
            <summary>
            The build failed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.MSBuildResult.Successful">
            <summary>
            The build was successful.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.WindowFrameShowAction">
            <summary>
            Defines the type of action to be taken in showing the window frame.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.DropDataType">
            <summary>
            Defines drop types
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.UIHierarchyElement">
            <summary>
            Used by the hierarchy node to decide which element to redraw.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.UIHierarchyElement.Icon">
            <summary>
            This will be translated to VSHPROPID_IconIndex
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.UIHierarchyElement.SccState">
            <summary>
            This will be translated to VSHPROPID_StateIconIndex
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.UIHierarchyElement.Caption">
            <summary>
            This will be translated to VSHPROPID_Caption
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty">
            <summary>
            Defines the global propeties used by the msbuild project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.BuildingInsideVisualStudio">
            <summary>
            Property specifying that we are building inside VS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.DevEnvDir">
            <summary>
            The VS installation directory. This is the same as the $(DevEnvDir) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.SolutionName">
            <summary>
            The name of the solution the project is created. This is the same as the $(SolutionName) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.SolutionFileName">
            <summary>
            The file name of the solution. This is the same as $(SolutionFileName) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.SolutionPath">
            <summary>
            The full path of the solution. This is the same as the $(SolutionPath) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.SolutionDir">
            <summary>
            The directory of the solution. This is the same as the $(SolutionDir) macro.
            </summary>               
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.SolutionExt">
            <summary>
            The extension of teh directory. This is the same as the $(SolutionExt) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.FxCopDir">
            <summary>
            The fxcop installation directory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.VSIDEResolvedNonMSBuildProjectOutputs">
            <summary>
            The ResolvedNonMSBuildProjectOutputs msbuild property
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.Configuration">
            <summary>
            The Configuartion property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.Platform">
            <summary>
            The platform property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.RunCodeAnalysisOnce">
            <summary>
            The RunCodeAnalysisOnce property
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.VisualStudioStyleErrors">
            <summary>
            The VisualStudioStyleErrors property.  We use this to determine correct error spans for build errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.GlobalProperty.SqmSessionGuid">
            <summary>
            The SqmSessionGuid property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.AfterProjectFileOpenedEventArgs.Added">
            <summary>
            True if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.BeforeProjectFileClosedEventArgs.Removed">
            <summary>
            true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.HierarchyNodeEventArgs">
            <summary>
            This class is used for the events raised by a HierarchyNode object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangedOnDiskEventArgs">
            <summary>
            Event args class for triggering file change event arguments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangedOnDiskEventArgs.fileName">
            <summary>
            File name that was changed on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangedOnDiskEventArgs.itemID">
            <summary>
            The item ide of the file that has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangedOnDiskEventArgs.fileChangeFlag">
            <summary>
            The reason the file has changed on disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangedOnDiskEventArgs.#ctor(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS)">
            <summary>
            Constructs a new event args.
            </summary>
            <param name="fileName">File name that was changed on disk.</param>
            <param name="id">The item id of the file that was changed on disk.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangedOnDiskEventArgs.FileName">
            <summary>
            Gets the file name that was changed on disk.
            </summary>
            <value>The file that was changed on disk.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangedOnDiskEventArgs.ItemID">
            <summary>
            Gets item id of the file that has changed
            </summary>
            <value>The file that was changed on disk.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.FileChangedOnDiskEventArgs.FileChangeFlag">
            <summary>
            The reason while the file has chnaged on disk.
            </summary>
            <value>The reason while the file has chnaged on disk.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ActiveConfigurationChangedEventArgs">
            <summary>
            Defines the event args for the active configuration chnage event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.ActiveConfigurationChangedEventArgs.hierarchy">
            <summary>
            The hierarchy whose configuration has changed 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.ActiveConfigurationChangedEventArgs.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Constructs a new event args.
            </summary>
            <param name="hierarchy">The hierarchy that has changed its configuration.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.ActiveConfigurationChangedEventArgs.Hierarchy">
            <summary>
            The hierarchy whose configuration has changed 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectPropertyChangedArgs">
            <summary>
            Argument of the event raised when a project property is changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.SuspendFileChanges">
            <summary>
            helper to make the editor ignore external changes
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.TrackDocumentsHelper">
            <summary>
            Used by a project to query the environment for permission to add, remove, or rename a file or directory in a solution
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.TrackDocumentsHelper.GetIVsTrackProjectDocuments2">
            <summary>
            Gets the IVsTrackProjectDocuments2 object by asking the service provider for it.
            </summary>
            <returns>the IVsTrackProjectDocuments2 object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.TrackDocumentsHelper.CanAddItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[])">
            <summary>
            Asks the environment for permission to add files.
            </summary>
            <param name="files">The files to add.</param>
            <param name="flags">The VSQUERYADDFILEFLAGS flags associated to the files added</param>
            <returns>true if the file can be added, false if not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.TrackDocumentsHelper.OnItemAdded(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS)">
            <summary>
            Notify the environment about a file just added
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.TrackDocumentsHelper.CanRemoveItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[])">
            <summary>
             Asks the environment for permission to remove files.
            </summary>
            <param name="files">an array of files to remove</param>
            <param name="flags">The VSQUERYREMOVEFILEFLAGS associated to the files to be removed.</param>
            <returns>true if the files can be removed, false if not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.TrackDocumentsHelper.OnItemRemoved(System.String,Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS)">
            <summary>
            Notify the environment about a file just removed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.TrackDocumentsHelper.CanRenameItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)">
            <summary>
             Asks the environment for permission to rename files.
            </summary>
            <param name="oldFileName">Path to the file to be renamed.</param>
            <param name="newFileName">Path to the new file.</param>
            <param name="flag">The VSRENAMEFILEFLAGS associated with the file to be renamed.</param>
            <returns>true if the file can be renamed. Otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.TrackDocumentsHelper.OnItemRenamed(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)">
            <summary>
            Get's called to tell the env that a file was renamed
            </summary>
            
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.UIThread.WrappedStacktraceKey">
            <summary>
            RunSync puts orignal exception stacktrace to Exception.Data by this key if action throws on UI thread
            </summary>
            WrappedStacktraceKey is a string to keep exception serializable.
        </member>
        <member name="P:Microsoft.VisualStudio.FSharp.ProjectSystem.UIThread.JTF">
            <summary>
            Local JoinableTaskContext
            ensuring non-reentrancy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.UIThread.DoOnUIThread``1(System.Func{``0})">
            <summary>
            Performs a callback on the UI thread and blocks until it is done, using the VS mechanism for
            ensuring non-reentrancy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.UIThread.DoOnUIThread(System.Action)">
            <summary>
            Performs a callback on the UI thread and blocks until it is done, using the VS mechanism for
            ensuring non-reentrancy.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionPaneUtil" -->
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.SolutionPaneUtil.TryRenameAndReturnNode(Microsoft.VisualStudio.FSharp.ProjectSystem.ProjectNode,System.Guid,System.UInt32,System.Func{System.String})">
            uses the serviceProvider and guid to identify a node in the solution pane and check if it
            is currently in rename mode or not. If it is return the pivotTreeView 
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.GetMsBuildPath(System.IServiceProvider)">
            <summary>
            Look in the registry under the current hive for the path
            of MSBuild
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.GetMsBuildPath(System.IServiceProvider,System.String)">
            <summary>
            Search the registry for the tools path for MSBuild.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="version">Msbuild version.</param>
            <returns>The msbuild tools path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.IsVisualStudioInDesignMode(System.IServiceProvider)">
            <summary>
            Is Visual Studio in design mode.
            </summary>
            <param name="site">The service provider.</param>
            <returns>true if visual studio is in design mode</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.IsInAutomationFunction(System.IServiceProvider)">
            <devdoc>
            Is an extensibility object executing an automation function.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>true if the extensiblity object is executing an automation function.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.CreateSemicolonDelimitedListOfStringFromGuids(System.Guid[])">
            <summary>
            Creates a semicolon delinited list of strings. This can be used to provide the properties for VSHPROPID_CfgPropertyPagesCLSIDList, VSHPROPID_PropertyPagesCLSIDList, VSHPROPID_PriorityPropertyPagesCLSIDList
            </summary>
            <param name="guids">An array of Guids.</param>
            <returns>A semicolon delimited string, or null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.GuidsArrayFromSemicolonDelimitedStringOfGuids(System.String)">
            <summary>
            Take list of guids as a single string and generate an array of Guids from it
            </summary>
            <param name="guidList">Semi-colon separated list of Guids</param>
            <returns>Array of Guids</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.ValidateFileName(System.IServiceProvider,System.String)">
            <summary>
            Validates a file path by validating all file parts. If the 
            the file name is invalid it throws an exception if the project is in automation. Otherwise it shows a dialog box with the error message.
            </summary>
            <param name="serviceProvider">The service provider</param>
            <param name="filePath">A full path to a file name</param>
            <exception cref="T:System.InvalidOperationException">In case of failure an InvalidOperationException is thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.CreateCALPOLESTR(System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a CALPOLESTR from a list of strings 
            It is the responsability of the caller to release this memory.
            </summary>
            <param name="strings"></param>
            <returns>A CALPOLESTR that was created from the the list of strings.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.CreateCADWORD(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            Creates a CADWORD from a list of tagVsSccFilesFlags. Memory is allocated for the elems. 
            It is the responsability of the caller to release this memory.
            </summary>
            <param name="flags"></param>
            <returns>A CADWORD created from the list of tagVsSccFilesFlags.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.GetImageList(System.IO.Stream)">
            <summary>
            Splits a bitmap from a Stream into an ImageList
            </summary>
            <param name="imageStream">A Stream representing a Bitmap</param>
            <returns>An ImageList object representing the images from the given stream</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.GetImageList(System.Object)">
            <summary>
            Splits a bitmap from a pointer to an ImageList
            </summary>
            <param name="imageListAsPointer">A pointer to a bitmap of images to split</param>
            <returns>An ImageList object representing the images from the given stream</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.GetActiveConfigurationName(EnvDTE.Project)">
            <summary>
            Gets the active configuration name.
            </summary>
            <param name="automationObject">The automation object.</param>
            <returns>The name of the active configuartion.</returns>        
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.IsSameComObject(System.Object,System.Object)">
            <summary>
            Verifies that two objects represent the same instance of a COM object.
            This essentially compares the IUnkown pointers of the 2 objects.
            This is needed in scenario where aggregation is involved.
            </summary>
            <param name="obj1">Can be an object, interface or IntPtr</param>
            <param name="obj2">Can be an object, interface or IntPtr</param>
            <returns>True if the 2 items represent the same thing</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.QueryInterfaceIUnknown(System.Object)">
            <summary>
            Retrieve the IUnknown for the managed or COM object passed in.
            </summary>
            <param name="objToQuery">Managed or COM object.</param>
            <returns>Pointer to the IUnknown interface of the object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.ContainsInvalidFileNameChars(System.String)">
            <summary>
            Returns true if thename that can represent a path, absolut or relative, or a file name contains invalid filename characters.
            </summary>
            <param name="name">File name</param>
            <returns>true if file name is invalid</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.IsFileNameInvalid(System.String)">
            Checks if a file name is valid.
            <param name="fileName">The name of the file</param>
            <returns>True if the file is valid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Helper method to call a converter explicitely to convert to an enum type
            </summary>
            <typeparam name="T">THe enum to convert to</typeparam>
            <param name="value">The enum value to be converted to</param>
            <param name="typeToConvert">The type to convert</param>
            <param name="culture">The culture to use to read the localized strings</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Helper method for converting from a string to an enum using a converter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="culture">The culture to use to read the localized strings</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)">
            <summary>
            Sets a string value from an enum
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <param name="enumValue">The value of teh enum.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.InitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes the in memory project. Sets BuildEnabled on the project to true.
            </summary>
            <param name="buildEngine">The build engine to use to create a build project.</param>
            <param name="fullProjectPath">The full path of the project.</param>
            <returns>A loaded msbuild project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.ReinitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Build.Evaluation.Project)">
            <summary>
            Loads a project file for the file. If the build project exists and it was loaded with a different file then it is unloaded first. 
            </summary>
            <param name="buildEngine">The build engine to use to create a build project.</param>
            <param name="fullProjectPath">The full path of the project.</param>
            <param name="exitingBuildProject">An Existing build project that will be reloaded.</param>
            <returns>A loaded msbuild project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.GetEnumConverter``1">
            <summary>
            Gets an instance of an EnumConverter for enums that have PropertyPageTypeConverter attribute
            </summary>
            <typeparam name="T">The type to search for the PropertyPageTypeConverter attribute.</typeparam>
            <returns>An instance of an enum converter, or null if none found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.IsFileNameAllGivenCharacter(System.Char,System.String)">
            <summary>>
            Checks if the file name is all the given character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.IsFilePartInValid(System.String)">
            <summary>
            Checks whether a file part contains valid characters. The file part can be any part of a non rooted path.
            </summary>
            <param name="filePart"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.RecursivelyCopyDirectory(System.String,System.String)">
            <summary>
            Copy a directory recursively to the specified non-existing directory
            </summary>
            <param name="source">Directory to copy from</param>
            <param name="target">Directory to copy to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.CanonicalizeFileName(System.String)">
            <summary>
            Canonicalizes a file name, including:
             - determines the full path to the file
             - casts to upper case
            Canonicalizing a file name makes it possible to compare file names using simple simple string comparison.
            
            Note: this method does not handle shared drives and UNC drives.
            </summary>
            <param name="anyFileName">A file name, which can be relative/absolute and contain lower-case/upper-case characters.</param>
            <returns>Canonicalized file name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.CanonicalizeFileNameNoThrow(System.String)">
            <summary>
            Attempts a call to CanonicalizeFileName, but returns the input unchanged if that method throws
            </summary>
            <param name="anyFileName">File name to canonicalize</param>
            <returns>Canonicalized file name if possible, otherwise returns input unchanged</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.IsTemplateFile(System.String)">
            <summary>
            Determines if a file is a template.
            </summary>
            <param name="fileName">The file to check whether it is a template file</param>
            <returns>true if the file is a template file</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.TryGetActiveConfigurationAndPlatform(System.IServiceProvider,System.Guid,Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName@)">
            <summary>
            Retrives the configuration and the platform using the IVsSolutionBuildManager2 interface.
            </summary>
            <param name="serviceProvider">A service provider.</param>
            <param name="hierarchy">The hierrachy whose configuration is requested.</param>
            <returns>true if successfull.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.TryGetConfigurationAndPlatform(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.FSharp.ProjectSystem.ConfigCanonicalName@)">
            <summary>
            Retrives the configuration and the platform using the IVsSolutionBuildManager2 interface.
            </summary>
            <param name="serviceProvider">A service provider.</param>
            <param name="hierarchy">The hierrachy whose configuration is requested.</param>
            <returns>true if successfull.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.Utilities.IsShellInCommandLineMode(System.IServiceProvider)">
            <summary>
            Determines whether the shell is in command line mode.
            </summary>
            <param name="serviceProvider">A reference to a Service Provider.</param>
            <returns>true if the shell is in command line mode. false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.KeyToken">
            <summary>
            Functions for dealing with key tokens like those found in assembly strong names:
            
                System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=x86
                
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.KeyToken.ToHexString(System.Byte[])">
            <summary>
            Convert a public key token into a string of hex digits.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.VsMenus">
            <summary>
            Defines menu commands guids and menu command id's
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FSharp.ProjectSystem.VSProjectConstants.guidFSharpProjectCmdSet">
            CommandIDs matching the commands defined symbols in MenusAndCommands.vsct (stored with FSharp.ProjectSystem.FSharp)
        </member>
        <member name="T:Microsoft.VisualStudio.FSharp.ProjectSystem.UIHierarchyUtilities">
             <summary>
            This class provides some useful static shell based methods. 
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FSharp.ProjectSystem.UIHierarchyUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)">
            <summary>
            Get reference to IVsUIHierarchyWindow interface from guid persistence slot.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="persistenceSlot">Unique identifier for a tool window created using IVsUIShell::CreateToolWindow. 
            The caller of this method can use predefined identifiers that map to tool windows if those tool windows 
            are known to the caller. </param>
            <returns>A reference to an IVsUIHierarchyWindow interface.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.ExtendedObjectWrapper.CreateExtendedProperties(System.Collections.Hashtable)">
            <devdoc>
                Creates the extended descriptors for an object given a list of extenders
                and property names.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.ExtendedObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <devdoc>
                Retrieves an array of member attributes for the given object.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.ExtendedObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <devdoc>
                Retrieves the class name for this object.  If null is returned,
                the type name is used.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.ExtendedObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <devdoc>
                Retrieves the name for this object.  If null is returned,
                the default is used.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.ExtendedObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <devdoc>
                Retrieves an array of events that the given component instance
                provides.  This may differ from the set of events the class
                provides.  If the component is sited, the site may add or remove
                additional events.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.ExtendedObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <devdoc>
                Retrieves an array of events that the given component instance
                provides.  This may differ from the set of events the class
                provides.  If the component is sited, the site may add or remove
                additional events.  The returned array of events will be
                filtered by the given set of attributes.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.ExtendedObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <devdoc>
                Retrieves an array of properties that the given component instance
                provides.  This may differ from the set of properties the class
                provides.  If the component is sited, the site may add or remove
                additional properties.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.ExtendedObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <devdoc>
                Retrieves an array of properties that the given component instance
                provides.  This may differ from the set of properties the class
                provides.  If the component is sited, the site may add or remove
                additional properties.  The returned array of properties will be
                filtered by the given set of attributes.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.FilterProperty(System.ComponentModel.PropertyDescriptor,System.Attribute)">
            <devdoc>
                Filters the given property with the given member attribute.  We only
                support filtering by adding a single attribute here.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <devdoc>
                Retrieves an array of member attributes for the given object.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <devdoc>
                Retrieves the class name for this object.  If null is returned,
                the type name is used.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <devdoc>
                Retrieves the name for this object.  If null is returned,
                the default is used.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <devdoc>
                Retrieves an array of events that the given component instance
                provides.  This may differ from the set of events the class
                provides.  If the component is sited, the site may add or remove
                additional events.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <devdoc>
                Retrieves an array of events that the given component instance
                provides.  This may differ from the set of events the class
                provides.  If the component is sited, the site may add or remove
                additional events.  The returned array of events will be
                filtered by the given set of attributes.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <devdoc>
                Retrieves an array of properties that the given component instance
                provides.  This may differ from the set of properties the class
                provides.  If the component is sited, the site may add or remove
                additional properties.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <devdoc>
                Retrieves an array of properties that the given component instance
                provides.  This may differ from the set of properties the class
                provides.  If the component is sited, the site may add or remove
                additional properties.  The returned array of properties will be
                filtered by the given set of attributes.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.ReadOnlyPropertyDescriptorWrapper">
            <summary>
            Wraps a PropertyDescriptor but changes it to read-only.  All other
              functionality is delegated to the original property descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Editors.PropertyPages.FilteredObjectWrapper.ReadOnlyPropertyDescriptorWrapper.AttributeCollectionToArray(System.ComponentModel.AttributeCollection)">
            <summary>
            Creates an Attribute array from an AttributeCollection instance
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
    </members>
</doc>
